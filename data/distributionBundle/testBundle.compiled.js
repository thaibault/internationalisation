#!/usr/bin/env node
// -*- coding: utf-8 -*-
'use strict'
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************!*\
  !*** multi index ***!
  \*******************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! test */3);


/***/ },
/* 1 */
/*!*************************!*\
  !*** external "jquery" ***!
  \*************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jquery\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpxdWVyeVwiPzBiNzYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwianF1ZXJ5XCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJqcXVlcnlcIlxuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module) {// #!/usr/bin/env node\n// -*- coding: utf-8 -*-\n/** @module jQuery-lang */'use strict'; /* !\n    region header\n    [Project page](http://torben.website/jQuery-lang)\n\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons\n    naming 3.0 unported license.\n    See http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/ // region imports\nvar _jquery=__webpack_require__(/*! jquery */ 1);var _jquery2=_interopRequireDefault(_jquery);__webpack_require__(/*! jQuery-tools */ 7);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;} // endregion\n/* eslint-disable no-duplicate-imports */ /* eslint-enable no-duplicate-imports */ // endregion\n// region types\nvar context=function(){if(_jquery2.default.type(window)==='undefined'){if(_jquery2.default.type(global)==='undefined')return _jquery2.default.type(module)==='undefined'?{}:module;return global;}return window;}();if(!('document' in context)&&'context' in _jquery2.default)context.document=_jquery2.default.context; // region plugins/classes\n/**\n * This plugin holds all needed methods to extend a website for\n * internationalisation.\n * @extends jQuery-tools:Tools\n * @property static:_name - Defines this class name to allow retrieving them\n * after name mangling.\n * @property _options - Options extended by the options given to the\n * initializer method.\n * @property _options.domNodeSelectorPrefix {string} - Selector prefix for all\n * nodes to take into account.\n * @property _options.default {string} - Initial language to use.\n * @property _options.allowedLanguages {Array.<string>} - List of all supported\n * languages.\n * @property _options.initial {string} - Initial set language (if omitted it\n * will be guest.\n * @property _options.templateDelimiter {Object.<string, string>} - Template\n * delimiter to recognize dynamic content.\n * @property _options.templateDelimiter.pre {string} - Delimiter which\n * introduces a dynamic expression.\n * @property _options.templateDelimiter.post {string} - Delimiter which\n * finishes a dynamic expression.\n * @property _options.fadeEffect {boolean} - Indicates weather a fade effect\n * should be performed.\n * @property _options.textNodeParent {Object.<string, Object>} - Saves\n * informations how parent dom nodes should be animated when containing text\n * will be switched.\n * @property _options.textNodeParent.showAnimation {Object} - Fade in options\n * when a new text should appear.\n * @property _options.textNodeParent.hideAnimation {Object} - Fade out effect\n * options when a text node should be removed before switching them.\n * @property _options.preReplacementLanguagePattern {string} - Pattern to\n * introduce a pre replacement language node.\n * @property _options.replacementLanguagePattern {string} - Text pattern to\n * introduce a post replacement node.\n * @property _options.currentLanguagePattern {string} - Saves a pattern to\n * recognize current language marker.\n * @property _options.replacementDomNodeName {Array.<string>} - Dom node tag\n * name which should be interpreted as a hidden alternate language node\n * (contains text in another language).\n * @property _options.replaceDomNodeNames {Array.<string>} - Tag names which\n * indicates dom nodes which should be replaced.\n * @property _options.toolsLockDescription {string} - Lock description for the\n * locking mechanism provided by the extended tools class.\n * @property _options.languageHashPrefix {string} - Hash prefix to determine\n * current active language by url.\n * @property _options.currentLanguageIndicatorClassName {string} - Class name\n * which marks current language switcher button or link.\n * @property _options.sessionDescription {string} - Name to use for saving\n * preferred language in local storage for current session.\n * @property _options.languageMapping {Object.<string, Array.<string>>} - A\n * mapping of alternate language descriptions.\n * @property _options.onSwitched {Function} - Callback which will be triggered\n * after a language switch has been finished.\n * @property _options.onEnsured {Function} - Callback which will be triggered\n * after a language check has been performed. Needed if some nodes have another\n * language active then others. Useful if only some parts of the dom tree was\n * updated and a full language update isn't required.\n * @property _options.onSwitch {Function} - Callback which should be called\n * before a language switch should be performed.\n * @property _options.onEnsure {Function} - Callback which should be called\n * before a language switch should be ensured.\n * @property _options.domNode {Object.<string, string>} - A mapping of needed\n * internal dom node descriptions to their corresponding selectors.\n * @property currentLanguage - Saves the current language.\n * @property knowntranslations - Saves a mapping of known language strings and\n * their corresponding translations, to boost language replacements or saves\n * redundant replacements in dom tree.\n * @property _$domNodeToFade - Saves all $-extended dom nodes which should be\n * animated.\n * @property _replacements - Saves all text nodes which should be replaced.\n * @property _textNodesWithKnownTranslation - Saves a mapping of known text\n * snippets to their corresponding $-extended dom nodes.\n */var Lang=function(_$$Tools$class){_inherits(Lang,_$$Tools$class);function Lang(){_classCallCheck(this,Lang);return _possibleConstructorReturn(this,_$$Tools$class.apply(this,arguments));} // endregion\n// region public methods\n// / region special\n/* eslint-disable jsdoc/require-description-complete-sentence */ /**\n     * Initializes the plugin. Current language is set and later needed dom\n     * nodes are grabbed.\n     * @param options - An options object.\n     * @param currentLanguage - Initial language to use.\n     * @param knownTranslation - Initial mapping of known language strings and\n     * their corresponding translations, to boost language replacements or\n     * saves redundant replacements in dom tree.\n     * @param $domNodeToFade - Initial dom node to fade.\n     * @param replacements - Initial nodes to replace.\n     * @param textNodesWithKnownTranslation - Saves a mapping of known text\n     * snippets to their corresponding $-extended dom nodes.\n     * @returns Returns the current instance wrapped in a promise.\n     */ // region static properties\nLang.prototype.initialize=function initialize(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var currentLanguage=arguments.length<=1||arguments[1]===undefined?'':arguments[1];var knownTranslation=arguments.length<=2||arguments[2]===undefined?{}:arguments[2];var $domNodeToFade=arguments.length<=3||arguments[3]===undefined?null:arguments[3];var _this2=this;var replacements=arguments.length<=4||arguments[4]===undefined?[]:arguments[4];var textNodesWithKnownTranslation=arguments.length<=5||arguments[5]===undefined?{}:arguments[5]; /* eslint-enable jsdoc/require-description-complete-sentence */this.currentLanguage=currentLanguage;this.knownTranslation=knownTranslation;this._$domNodeToFade=$domNodeToFade;this._replacements=replacements;this._textNodesWithKnownTranslation=textNodesWithKnownTranslation;this._options={domNodeSelectorPrefix:'body',default:'enUS',allowedLanguages:[],initial:null,templateDelimiter:{pre:'{{',post:'}}'},fadeEffect:true,textNodeParent:{showAnimation:[{opacity:1},{duration:'fast'}],hideAnimation:[{opacity:0},{duration:'fast'}]},preReplacementLanguagePattern:'^\\\\|({1})$',replacementLanguagePattern:'^([a-z]{2}[A-Z]{2}):((.|\\\\s)*)$',currentLanguagePattern:'^[a-z]{2}[A-Z]{2}$',replacementDomNodeName:['#comment','langreplacement'],replaceDomNodeNames:['#text','langreplace'],toolsLockDescription:'{1}Switch',languageHashPrefix:'lang-',currentLanguageIndicatorClassName:'current',sessionDescription:'{1}',languageMapping:{deDE:['de','de_de','de-de','german','deutsch'],enUS:['en','en_us','en-us'],enEN:['en_en','en-en','english'],frFR:['fr','fr_fr','fr-fr','french']},onSwitched:_jquery2.default.noop(),onEnsured:_jquery2.default.noop(),onSwitch:_jquery2.default.noop(),onEnsure:_jquery2.default.noop(),domNode:{knownTranslation:'div.toc'}};_$$Tools$class.prototype.initialize.call(this,options);this._options.preReplacementLanguagePattern=this.constructor.stringFormat(this._options.preReplacementLanguagePattern,this._options.replacementLanguagePattern.substr(1,this._options.replacementLanguagePattern.length-2));this._options.toolsLockDescription=this.constructor.stringFormat(this._options.toolsLockDescription,this.constructor._name);this._options.sessionDescription=this.constructor.stringFormat(this._options.sessionDescription,this.constructor._name);this.$domNodes=this.grabDomNode(this._options.domNode);this.$domNodes.switchLanguageButtons=(0,_jquery2.default)('a[href^=\"#'+this._options.languageHashPrefix+'\"]');this._movePreReplacementNodes();this.currentLanguage=this._normalizeLanguage(this._options.default); /*\n            NOTE: Only switch current language indicator if we haven't an\n            initial language switch which will perform the indicator switch.\n        */var newLanguage=this._determineUsefulLanguage();this.on(this.$domNodes.switchLanguageButtons,'click',function(event){event.preventDefault();return _this2.switch((0,_jquery2.default)(event.target).attr('href').substr(_this2._options.languageHashPrefix.length+1));});if(this.currentLanguage===newLanguage)return _jquery2.default.when(this._switchCurrentLanguageIndicator(newLanguage));return this.switch(newLanguage,true);}; // / endregion\n/**\n     * Switches the current language to given language. This method is mutual\n     * synchronized.\n     * @param language - New language as string or \"true\". If set to \"true\" it\n     * indicates that the dom tree should be checked again current language to\n     * ensure every text node has right content.\n     * @param ensure - Indicates if a switch effect should be avoided.\n     * @returns Returns the current instance wrapped in a promise.\n     */ // endregion\n// region dynamic properties\nLang.prototype.switch=function _switch(language){var _this3=this;var ensure=arguments.length<=1||arguments[1]===undefined?false:arguments[1];if(language!==true&&this._options.allowedLanguages.length&&!this._options.allowedLanguages.includes(language)){this.debug('\"{1}\" isn\\'t one of the allowed languages.',language);return _jquery2.default.when(this);}var deferred=_jquery2.default.Deferred();this.acquireLock(this._options.toolsLockDescription,function(){if(language===true){ensure=true;language=_this3.currentLanguage;}else language=_this3._normalizeLanguage(language);if(ensure&&language!==_this3._options.default||_this3.currentLanguage!==language){var actionDescription='Switch to';if(ensure)actionDescription='Ensure';_this3.debug('{1} \"{2}\".',actionDescription,language);_this3._switchCurrentLanguageIndicator(language);_this3.fireEvent(ensure?'ensure':'switch',true,_this3,_this3.currentLanguage,language);_this3._$domNodeToFade=null;_this3._replacements=[];var _collectTextNodesToRe=_this3._collectTextNodesToReplace(language,ensure);var $lastTextNodeToTranslate=_collectTextNodesToRe[0];var $lastLanguageDomNode=_collectTextNodesToRe[1];_this3._ensureLastTextNodeHavingLanguageIndicator($lastTextNodeToTranslate,$lastLanguageDomNode,ensure);_this3._handleSwitchEffect(language,ensure).then(function(){return deferred.resolve(_this3);});}else {_this3.debug('\"{1}\" is already current selected language.',language);_this3.releaseLock(_this3._options.toolsLockDescription);deferred.resolve(_this3);}});return deferred;}; /**\n     * Ensures current selected language.\n     * @returns Returns the current instance wrapped in a promise.\n     */Lang.prototype.refresh=function refresh(){return this._movePreReplacementNodes().switch(true);}; // / endregion\n// region protected methods\n/**\n     * Moves pre replacement dom nodes into next dom node behind translation\n     * text to use the same translation algorithm for both.\n     * @returns Returns the current instance.\n     */Lang.prototype._movePreReplacementNodes=function _movePreReplacementNodes(){var self=this;this.$domNodes.parent.find(':not(iframe)').contents().each(function(){var $this=(0,_jquery2.default)(this);var nodeName=$this.prop('nodeName').toLowerCase();if(self._options.replacementDomNodeName.includes(nodeName)){if(!['#comment','#text'].includes(nodeName)) // NOTE: Hide replacement dom nodes.\n$this.hide();var regularExpression=new RegExp(self._options.preReplacementLanguagePattern);var match=$this.prop('textContent').match(regularExpression);if(match&&match[0]){(function(){$this.prop('textContent',$this.prop('textContent').replace(regularExpression,match[1]));var selfFound=false;$this.parent().contents().each(function(){if(selfFound&&(0,_jquery2.default)(this).Tools('getText').trim()){$this.appendTo(this);return false;}if($this[0]===this)selfFound=true;});})();}}});return this;}; /**\n     * Collects all text nodes which should be replaced later.\n     * @param language - New language to use.\n     * @param ensure - Indicates if the whole dom should be checked again\n     * current language to ensure every text node has right content.\n     * @returns Return a tuple of last text and language dom node to translate.\n     */Lang.prototype._collectTextNodesToReplace=function _collectTextNodesToReplace(language,ensure){var $currentTextNodeToTranslate=null;var $currentLanguageDomNode=null;var $lastTextNodeToTranslate=null;var $lastLanguageDomNode=null;this.knownTranslation={};var self=this;this.$domNodes.parent.find(':not(iframe)').contents().each(function(){var $currentDomNode=(0,_jquery2.default)(this);var nodeName=$currentDomNode.prop('nodeName').toLowerCase();if(self._options.replaceDomNodeNames.includes(nodeName.toLowerCase())){ // NOTE: We skip empty and nested text nodes\nif($currentDomNode.Tools('getText').trim()&&$currentDomNode.parents(self._options.replaceDomNodeNames.join()).length===0){$lastLanguageDomNode=self._ensureLastTextNodeHavingLanguageIndicator($lastTextNodeToTranslate,$lastLanguageDomNode,ensure);$currentTextNodeToTranslate=$currentDomNode;}}else if($currentTextNodeToTranslate){if(self._options.replacementDomNodeName.includes(nodeName)){var content=$currentDomNode.prop('textContent');if(nodeName!=='#comment')content=$currentDomNode.html();var match=content.match(new RegExp(self._options.replacementLanguagePattern));if(Array.isArray(match)&&match[1]===language){ // Save known text translations.\nself.knownTranslation[$currentTextNodeToTranslate.Tools('getText').trim()]=match[2].trim();self._registerTextNodeToChange($currentTextNodeToTranslate,$currentDomNode,match,$currentLanguageDomNode);$lastTextNodeToTranslate=$currentTextNodeToTranslate;$lastLanguageDomNode=$currentLanguageDomNode;$currentTextNodeToTranslate=null;$currentLanguageDomNode=null;}else if($currentDomNode.prop('textContent').match(new RegExp(self._options.currentLanguagePattern)))$currentLanguageDomNode=$currentDomNode;return true;}$lastTextNodeToTranslate=null;$lastLanguageDomNode=null;$currentTextNodeToTranslate=null;$currentLanguageDomNode=null;}});this._registerKnownTextNodes();return [$lastTextNodeToTranslate,$lastLanguageDomNode];}; /**\n     * Iterates all text nodes in language known area with known translations.\n     * @returns Returns the current instance.\n     */Lang.prototype._registerKnownTextNodes=function _registerKnownTextNodes(){this._textNodesWithKnownTranslation={};var self=this;this.$domNodes.knownTranslation.find(':not(iframe)').contents().each(function(){var $currentDomNode=(0,_jquery2.default)(this); // NOTE: We skip empty and nested text nodes.\nif(!self._options.replaceDomNodeNames.includes($currentDomNode.prop('nodeName').toLowerCase())&&$currentDomNode.Tools('getText').trim()&&$currentDomNode.parents(self._options.replaceDomNodeNames.join()).length===0&&self.knownTranslation.hasOwnProperty($currentDomNode.Tools('getText').trim())){self._addTextNodeToFade($currentDomNode);if(self._textNodesWithKnownTranslation.hasOwnProperty(self.knownTranslation[$currentDomNode.prop('textContent').trim()]))self._textNodesWithKnownTranslation[self.knownTranslation[$currentDomNode.prop('textContent').trim()]]=self._textNodesWithKnownTranslation[self.knownTranslation[$currentDomNode.prop('textContent').trim()]].add($currentDomNode);else self._textNodesWithKnownTranslation[self.knownTranslation[$currentDomNode.prop('textContent').trim()]]=$currentDomNode;}});return this;}; /**\n     * Normalizes a given language string.\n     * @param language - New language to use.\n     * @returns Returns the normalized version of given language.\n     */Lang.prototype._normalizeLanguage=function _normalizeLanguage(language){for(var otherLanguage in this._options.languageMapping){if(this._options.languageMapping.hasOwnProperty(otherLanguage)){if(!this._options.languageMapping[otherLanguage].includes(otherLanguage.toLowerCase()))this._options.languageMapping[otherLanguage].push(otherLanguage.toLowerCase());if(this._options.languageMapping[otherLanguage].includes(language.toLowerCase()))return otherLanguage;}}return this._options.default;}; /**\n     * Determines a useful initial language depending on session and browser\n     * settings.\n     * @returns Returns the determined language.\n     */Lang.prototype._determineUsefulLanguage=function _determineUsefulLanguage(){var result=void 0;if(this._options.initial)result=this._options.initial;else if('localStorage' in context&&context.localStorage.getItem(this._options.sessionDescription)){result=context.localStorage.getItem(this._options.sessionDescription);this.debug('Determine \"{1}\", because of local storage information.',result);}else if('navigator' in context&&navigator.language){result=navigator.language;this.debug('Determine \"{1}\", because of browser settings.',result);}else {result=this._options.default;this.debug('Determine \"{1}\", because of default option.',result);}result=this._normalizeLanguage(result);if(this._options.allowedLanguages.length&&!this._options.allowedLanguages.includes(result)){this.debug('\"{1}\" isn\\'t one of the allowed languages. Set language'+' to \"{2}\".',result,this._options.allowedLanguages[0]);result=this._options.allowedLanguages[0];}if('localStorage' in context)context.localStorage.setItem(this._options.sessionDescription,result);return result;}; /**\n     * Depending an activated switching effect this method initialized the\n     * effect of replace all text string directly.\n     * @param language - New language to use.\n     * @param ensure - Indicates if current language should be ensured again\n     * every text node content.\n     * @returns Returns the current instance wrapped in a promise.\n     */Lang.prototype._handleSwitchEffect=function _handleSwitchEffect(language,ensure){var _this4=this;var oldLanguage=this.currentLanguage;if(!ensure&&this._options.fadeEffect&&this._$domNodeToFade)return this._$domNodeToFade.animate.apply(this._$domNodeToFade,this._options.textNodeParent.hideAnimation).promise().then(function(){_this4._switchLanguage(language);if(_this4._$domNodeToFade)return _this4._$domNodeToFade.animate.apply(_this4._$domNodeToFade,_this4._options.textNodeParent.showAnimation).promise().then(function(){_this4.fireEvent(ensure?'ensured':'switched',true,_this4,oldLanguage,language);_this4.releaseLock(_this4._options.toolsLockDescription);return _jquery2.default.when(_this4);});return _jquery2.default.when(_this4);});this._switchLanguage(language);this.fireEvent(ensure?'ensured':'switched',true,this,oldLanguage,language);this.releaseLock(this._options.toolsLockDescription);return _jquery2.default.when(this);}; /**\n     * Registers a text node to change its content with given replacement.\n     * @param $textNode - Text node with content to translate.\n     * @returns Returns the current instance.\n     */Lang.prototype._addTextNodeToFade=function _addTextNodeToFade($textNode){var $parent=$textNode.parent();if(this._$domNodeToFade)this._$domNodeToFade=this._$domNodeToFade.add($parent);else this._$domNodeToFade=$parent;return this;}; /**\n     * Registers a text node to change its content with given replacement.\n     * @param $currentTextNodeToTranslate - Text node with content to\n     * translate.\n     * @param $currentDomNode - A comment node with replacement content.\n     * @param match - A matching array of replacement's text content.\n     * @param $currentLanguageDomNode - A potential given text node indicating\n     * the language of given text node.\n     * @returns Returns the current instance.\n     */Lang.prototype._registerTextNodeToChange=function _registerTextNodeToChange($currentTextNodeToTranslate,$currentDomNode,match,$currentLanguageDomNode){this._addTextNodeToFade($currentTextNodeToTranslate);if($currentDomNode)this._replacements.push({$textNodeToTranslate:$currentTextNodeToTranslate,$nodeToReplace:$currentDomNode,textToReplace:match[2],$currentLanguageDomNode:$currentLanguageDomNode});return this;}; /**\n     * Checks if last text has a language indication comment node. This\n     * function is called after each parsed dom text node.\n     * @param $lastTextNodeToTranslate - Last text to node to check.\n     * @param $lastLanguageDomNode - A potential given language indication\n     * commend node.\n     * @param ensure - Indicates if current language should be ensured again\n     * every text node content.\n     * @returns Returns the retrieved or newly created language indicating\n     * comment node.\n     */Lang.prototype._ensureLastTextNodeHavingLanguageIndicator=function _ensureLastTextNodeHavingLanguageIndicator($lastTextNodeToTranslate,$lastLanguageDomNode,ensure){if($lastTextNodeToTranslate&&!$lastLanguageDomNode){ /*\n                Last text node doesn't have a current language indicating dom\n                node.\n            */var currentLocalLanguage=this.currentLanguage;if(ensure)currentLocalLanguage=this._options.default;$lastLanguageDomNode=(0,_jquery2.default)('<!--'+currentLocalLanguage+'-->');$lastTextNodeToTranslate.after($lastLanguageDomNode);}return $lastLanguageDomNode;}; /**\n     * Performs the low level text replacements for switching to given\n     * language.\n     * @param language - The new language to switch to.\n     * @returns Returns the current instance.\n     */Lang.prototype._switchLanguage=function _switchLanguage(language){var _this5=this;var _loop=function _loop(){if(_isArray){if(_i>=_iterator.length)return 'break';_ref=_iterator[_i++];}else {_i=_iterator.next();if(_i.done)return 'break';_ref=_i.value;}var replacement=_ref;var currentText=replacement.$textNodeToTranslate.html();if(replacement.$textNodeToTranslate.prop('nodeName')==='#text')currentText=replacement.$textNodeToTranslate.prop('textContent');var trimmedText=currentText.trim();if(!_this5._options.templateDelimiter||!trimmedText.endsWith(_this5._options.templateDelimiter.post)&&_this5._options.templateDelimiter.post){ // IgnoreTypeCheck\nvar _$currentLanguageDomNode=replacement.$currentLanguageDomNode;if(!replacement.$currentLanguageDomNode){(function(){ /*\n                        Language note wasn't present initially. So we have to\n                        determine it now.\n                    */_$currentLanguageDomNode=(0,_jquery2.default)('body');var currentDomNodeFound=false;replacement.$textNodeToTranslate.parent().contents().each(function(){if(currentDomNodeFound){replacement.$currentLanguageDomNode=_$currentLanguageDomNode=(0,_jquery2.default)(this);return false;}if(this===replacement.$textNodeToTranslate[0])currentDomNodeFound=true;});})();}var currentLanguage=_$currentLanguageDomNode.prop('textContent');if(language===currentLanguage)_this5.warn('Text node \"'+replacement.textToReplace+'\" is marked '+('as \"'+currentLanguage+'\" and has same translation ')+'language as it already is.');var nodeName=replacement.$nodeToReplace.prop('nodeName').toLowerCase();if(nodeName==='#comment')replacement.$textNodeToTranslate.after((0,_jquery2.default)('<!--'+currentLanguage+':'+currentText+'-->'));else replacement.$textNodeToTranslate.after((0,_jquery2.default)('<'+nodeName+'>'+currentLanguage+':'+currentText+'</'+(nodeName+'>')).hide());replacement.$textNodeToTranslate.after((0,_jquery2.default)('<!--'+language+'-->'));if(replacement.$textNodeToTranslate.prop('nodeName')==='#text')replacement.$textNodeToTranslate.prop('textContent',replacement.textToReplace);else replacement.$textNodeToTranslate.html(replacement.textToReplace);_$currentLanguageDomNode.remove();replacement.$nodeToReplace.remove();}};for(var _iterator=this._replacements,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;var _ret2=_loop();if(_ret2==='break')break;} // Translate registered known text nodes.\n_jquery2.default.each(this._textNodesWithKnownTranslation,function(content,$domNode){return $domNode.prop('textContent',content);});if('localStorage' in context)context.localStorage.setItem(this._options.sessionDescription,language);this.currentLanguage=language;return this;}; /**\n     * Switches the current language indicator in language switch triggered dom\n     * nodes.\n     * @param language - The new language to switch to.\n     * @returns Returns the current instance.\n     */Lang.prototype._switchCurrentLanguageIndicator=function _switchCurrentLanguageIndicator(language){(0,_jquery2.default)('a[href=\"#'+this._options.languageHashPrefix+(this.currentLanguage+'\"].')+this._options.currentLanguageIndicatorClassName).removeClass(this._options.currentLanguageIndicatorClassName);(0,_jquery2.default)('a[href=\"#'+this._options.languageHashPrefix+language+'\"]').addClass(this._options.currentLanguageIndicatorClassName);return this;}; // endregion\nreturn Lang;}(_jquery2.default.Tools.class); // endregion\nLang._name='Lang';_jquery2.default.Lang=function(){return _jquery2.default.Tools().controller(Lang,arguments);};_jquery2.default.Lang.class=Lang; /** The jQuery-lang plugin class. */module.exports=Lang; // region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./~/webpack/buildin/module.js */ 5)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9pbmRleC5qcz8xNjg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG4vLyAjIS91c3IvYmluL2VudiBub2RlXG4vLyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbi8qKiBAbW9kdWxlIGpRdWVyeS1sYW5nICovXG4ndXNlIHN0cmljdCdcbi8qICFcbiAgICByZWdpb24gaGVhZGVyXG4gICAgW1Byb2plY3QgcGFnZV0oaHR0cDovL3RvcmJlbi53ZWJzaXRlL2pRdWVyeS1sYW5nKVxuXG4gICAgQ29weXJpZ2h0IFRvcmJlbiBTaWNrZXJ0IChpbmZvW1wifmF0flwiXXRvcmJlbi53ZWJzaXRlKSAxNi4xMi4yMDEyXG5cbiAgICBMaWNlbnNlXG4gICAgLS0tLS0tLVxuXG4gICAgVGhpcyBsaWJyYXJ5IHdyaXR0ZW4gYnkgVG9yYmVuIFNpY2tlcnQgc3RhbmQgdW5kZXIgYSBjcmVhdGl2ZSBjb21tb25zXG4gICAgbmFtaW5nIDMuMCB1bnBvcnRlZCBsaWNlbnNlLlxuICAgIFNlZSBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvZGVlZC5kZVxuICAgIGVuZHJlZ2lvblxuKi9cbi8vIHJlZ2lvbiBpbXBvcnRzXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgJ2pRdWVyeS10b29scydcbi8qIGVzbGludC1kaXNhYmxlIG5vLWR1cGxpY2F0ZS1pbXBvcnRzICovXG5pbXBvcnQgdHlwZSB7JERvbU5vZGUsICREZWZlcnJlZH0gZnJvbSAnalF1ZXJ5LXRvb2xzJ1xuLyogZXNsaW50LWVuYWJsZSBuby1kdXBsaWNhdGUtaW1wb3J0cyAqL1xuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gdHlwZXNcbmV4cG9ydCB0eXBlIFJlcGxhY2VtZW50ID0ge1xuICAgICR0ZXh0Tm9kZVRvVHJhbnNsYXRlOiREb21Ob2RlO1xuICAgICRub2RlVG9SZXBsYWNlOiREb21Ob2RlO1xuICAgIHRleHRUb1JlcGxhY2U6c3RyaW5nO1xuICAgICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlOj8kRG9tTm9kZTtcbn1cbi8vIGVuZHJlZ2lvblxuY29uc3QgY29udGV4dDpPYmplY3QgPSAoKCk6T2JqZWN0ID0+IHtcbiAgICBpZiAoJC50eXBlKHdpbmRvdykgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICgkLnR5cGUoZ2xvYmFsKSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICByZXR1cm4gKCQudHlwZShtb2R1bGUpID09PSAndW5kZWZpbmVkJykgPyB7fSA6IG1vZHVsZVxuICAgICAgICByZXR1cm4gZ2xvYmFsXG4gICAgfVxuICAgIHJldHVybiB3aW5kb3dcbn0pKClcbmlmICghKCdkb2N1bWVudCcgaW4gY29udGV4dCkgJiYgJ2NvbnRleHQnIGluICQpXG4gICAgY29udGV4dC5kb2N1bWVudCA9ICQuY29udGV4dFxuLy8gcmVnaW9uIHBsdWdpbnMvY2xhc3Nlc1xuLyoqXG4gKiBUaGlzIHBsdWdpbiBob2xkcyBhbGwgbmVlZGVkIG1ldGhvZHMgdG8gZXh0ZW5kIGEgd2Vic2l0ZSBmb3JcbiAqIGludGVybmF0aW9uYWxpc2F0aW9uLlxuICogQGV4dGVuZHMgalF1ZXJ5LXRvb2xzOlRvb2xzXG4gKiBAcHJvcGVydHkgc3RhdGljOl9uYW1lIC0gRGVmaW5lcyB0aGlzIGNsYXNzIG5hbWUgdG8gYWxsb3cgcmV0cmlldmluZyB0aGVtXG4gKiBhZnRlciBuYW1lIG1hbmdsaW5nLlxuICogQHByb3BlcnR5IF9vcHRpb25zIC0gT3B0aW9ucyBleHRlbmRlZCBieSB0aGUgb3B0aW9ucyBnaXZlbiB0byB0aGVcbiAqIGluaXRpYWxpemVyIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5kb21Ob2RlU2VsZWN0b3JQcmVmaXgge3N0cmluZ30gLSBTZWxlY3RvciBwcmVmaXggZm9yIGFsbFxuICogbm9kZXMgdG8gdGFrZSBpbnRvIGFjY291bnQuXG4gKiBAcHJvcGVydHkgX29wdGlvbnMuZGVmYXVsdCB7c3RyaW5nfSAtIEluaXRpYWwgbGFuZ3VhZ2UgdG8gdXNlLlxuICogQHByb3BlcnR5IF9vcHRpb25zLmFsbG93ZWRMYW5ndWFnZXMge0FycmF5LjxzdHJpbmc+fSAtIExpc3Qgb2YgYWxsIHN1cHBvcnRlZFxuICogbGFuZ3VhZ2VzLlxuICogQHByb3BlcnR5IF9vcHRpb25zLmluaXRpYWwge3N0cmluZ30gLSBJbml0aWFsIHNldCBsYW5ndWFnZSAoaWYgb21pdHRlZCBpdFxuICogd2lsbCBiZSBndWVzdC5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlciB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59IC0gVGVtcGxhdGVcbiAqIGRlbGltaXRlciB0byByZWNvZ25pemUgZHluYW1pYyBjb250ZW50LlxuICogQHByb3BlcnR5IF9vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVyLnByZSB7c3RyaW5nfSAtIERlbGltaXRlciB3aGljaFxuICogaW50cm9kdWNlcyBhIGR5bmFtaWMgZXhwcmVzc2lvbi5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlci5wb3N0IHtzdHJpbmd9IC0gRGVsaW1pdGVyIHdoaWNoXG4gKiBmaW5pc2hlcyBhIGR5bmFtaWMgZXhwcmVzc2lvbi5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5mYWRlRWZmZWN0IHtib29sZWFufSAtIEluZGljYXRlcyB3ZWF0aGVyIGEgZmFkZSBlZmZlY3RcbiAqIHNob3VsZCBiZSBwZXJmb3JtZWQuXG4gKiBAcHJvcGVydHkgX29wdGlvbnMudGV4dE5vZGVQYXJlbnQge09iamVjdC48c3RyaW5nLCBPYmplY3Q+fSAtIFNhdmVzXG4gKiBpbmZvcm1hdGlvbnMgaG93IHBhcmVudCBkb20gbm9kZXMgc2hvdWxkIGJlIGFuaW1hdGVkIHdoZW4gY29udGFpbmluZyB0ZXh0XG4gKiB3aWxsIGJlIHN3aXRjaGVkLlxuICogQHByb3BlcnR5IF9vcHRpb25zLnRleHROb2RlUGFyZW50LnNob3dBbmltYXRpb24ge09iamVjdH0gLSBGYWRlIGluIG9wdGlvbnNcbiAqIHdoZW4gYSBuZXcgdGV4dCBzaG91bGQgYXBwZWFyLlxuICogQHByb3BlcnR5IF9vcHRpb25zLnRleHROb2RlUGFyZW50LmhpZGVBbmltYXRpb24ge09iamVjdH0gLSBGYWRlIG91dCBlZmZlY3RcbiAqIG9wdGlvbnMgd2hlbiBhIHRleHQgbm9kZSBzaG91bGQgYmUgcmVtb3ZlZCBiZWZvcmUgc3dpdGNoaW5nIHRoZW0uXG4gKiBAcHJvcGVydHkgX29wdGlvbnMucHJlUmVwbGFjZW1lbnRMYW5ndWFnZVBhdHRlcm4ge3N0cmluZ30gLSBQYXR0ZXJuIHRvXG4gKiBpbnRyb2R1Y2UgYSBwcmUgcmVwbGFjZW1lbnQgbGFuZ3VhZ2Ugbm9kZS5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5yZXBsYWNlbWVudExhbmd1YWdlUGF0dGVybiB7c3RyaW5nfSAtIFRleHQgcGF0dGVybiB0b1xuICogaW50cm9kdWNlIGEgcG9zdCByZXBsYWNlbWVudCBub2RlLlxuICogQHByb3BlcnR5IF9vcHRpb25zLmN1cnJlbnRMYW5ndWFnZVBhdHRlcm4ge3N0cmluZ30gLSBTYXZlcyBhIHBhdHRlcm4gdG9cbiAqIHJlY29nbml6ZSBjdXJyZW50IGxhbmd1YWdlIG1hcmtlci5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5yZXBsYWNlbWVudERvbU5vZGVOYW1lIHtBcnJheS48c3RyaW5nPn0gLSBEb20gbm9kZSB0YWdcbiAqIG5hbWUgd2hpY2ggc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGEgaGlkZGVuIGFsdGVybmF0ZSBsYW5ndWFnZSBub2RlXG4gKiAoY29udGFpbnMgdGV4dCBpbiBhbm90aGVyIGxhbmd1YWdlKS5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5yZXBsYWNlRG9tTm9kZU5hbWVzIHtBcnJheS48c3RyaW5nPn0gLSBUYWcgbmFtZXMgd2hpY2hcbiAqIGluZGljYXRlcyBkb20gbm9kZXMgd2hpY2ggc2hvdWxkIGJlIHJlcGxhY2VkLlxuICogQHByb3BlcnR5IF9vcHRpb25zLnRvb2xzTG9ja0Rlc2NyaXB0aW9uIHtzdHJpbmd9IC0gTG9jayBkZXNjcmlwdGlvbiBmb3IgdGhlXG4gKiBsb2NraW5nIG1lY2hhbmlzbSBwcm92aWRlZCBieSB0aGUgZXh0ZW5kZWQgdG9vbHMgY2xhc3MuXG4gKiBAcHJvcGVydHkgX29wdGlvbnMubGFuZ3VhZ2VIYXNoUHJlZml4IHtzdHJpbmd9IC0gSGFzaCBwcmVmaXggdG8gZGV0ZXJtaW5lXG4gKiBjdXJyZW50IGFjdGl2ZSBsYW5ndWFnZSBieSB1cmwuXG4gKiBAcHJvcGVydHkgX29wdGlvbnMuY3VycmVudExhbmd1YWdlSW5kaWNhdG9yQ2xhc3NOYW1lIHtzdHJpbmd9IC0gQ2xhc3MgbmFtZVxuICogd2hpY2ggbWFya3MgY3VycmVudCBsYW5ndWFnZSBzd2l0Y2hlciBidXR0b24gb3IgbGluay5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5zZXNzaW9uRGVzY3JpcHRpb24ge3N0cmluZ30gLSBOYW1lIHRvIHVzZSBmb3Igc2F2aW5nXG4gKiBwcmVmZXJyZWQgbGFuZ3VhZ2UgaW4gbG9jYWwgc3RvcmFnZSBmb3IgY3VycmVudCBzZXNzaW9uLlxuICogQHByb3BlcnR5IF9vcHRpb25zLmxhbmd1YWdlTWFwcGluZyB7T2JqZWN0LjxzdHJpbmcsIEFycmF5LjxzdHJpbmc+Pn0gLSBBXG4gKiBtYXBwaW5nIG9mIGFsdGVybmF0ZSBsYW5ndWFnZSBkZXNjcmlwdGlvbnMuXG4gKiBAcHJvcGVydHkgX29wdGlvbnMub25Td2l0Y2hlZCB7RnVuY3Rpb259IC0gQ2FsbGJhY2sgd2hpY2ggd2lsbCBiZSB0cmlnZ2VyZWRcbiAqIGFmdGVyIGEgbGFuZ3VhZ2Ugc3dpdGNoIGhhcyBiZWVuIGZpbmlzaGVkLlxuICogQHByb3BlcnR5IF9vcHRpb25zLm9uRW5zdXJlZCB7RnVuY3Rpb259IC0gQ2FsbGJhY2sgd2hpY2ggd2lsbCBiZSB0cmlnZ2VyZWRcbiAqIGFmdGVyIGEgbGFuZ3VhZ2UgY2hlY2sgaGFzIGJlZW4gcGVyZm9ybWVkLiBOZWVkZWQgaWYgc29tZSBub2RlcyBoYXZlIGFub3RoZXJcbiAqIGxhbmd1YWdlIGFjdGl2ZSB0aGVuIG90aGVycy4gVXNlZnVsIGlmIG9ubHkgc29tZSBwYXJ0cyBvZiB0aGUgZG9tIHRyZWUgd2FzXG4gKiB1cGRhdGVkIGFuZCBhIGZ1bGwgbGFuZ3VhZ2UgdXBkYXRlIGlzbid0IHJlcXVpcmVkLlxuICogQHByb3BlcnR5IF9vcHRpb25zLm9uU3dpdGNoIHtGdW5jdGlvbn0gLSBDYWxsYmFjayB3aGljaCBzaG91bGQgYmUgY2FsbGVkXG4gKiBiZWZvcmUgYSBsYW5ndWFnZSBzd2l0Y2ggc2hvdWxkIGJlIHBlcmZvcm1lZC5cbiAqIEBwcm9wZXJ0eSBfb3B0aW9ucy5vbkVuc3VyZSB7RnVuY3Rpb259IC0gQ2FsbGJhY2sgd2hpY2ggc2hvdWxkIGJlIGNhbGxlZFxuICogYmVmb3JlIGEgbGFuZ3VhZ2Ugc3dpdGNoIHNob3VsZCBiZSBlbnN1cmVkLlxuICogQHByb3BlcnR5IF9vcHRpb25zLmRvbU5vZGUge09iamVjdC48c3RyaW5nLCBzdHJpbmc+fSAtIEEgbWFwcGluZyBvZiBuZWVkZWRcbiAqIGludGVybmFsIGRvbSBub2RlIGRlc2NyaXB0aW9ucyB0byB0aGVpciBjb3JyZXNwb25kaW5nIHNlbGVjdG9ycy5cbiAqIEBwcm9wZXJ0eSBjdXJyZW50TGFuZ3VhZ2UgLSBTYXZlcyB0aGUgY3VycmVudCBsYW5ndWFnZS5cbiAqIEBwcm9wZXJ0eSBrbm93bnRyYW5zbGF0aW9ucyAtIFNhdmVzIGEgbWFwcGluZyBvZiBrbm93biBsYW5ndWFnZSBzdHJpbmdzIGFuZFxuICogdGhlaXIgY29ycmVzcG9uZGluZyB0cmFuc2xhdGlvbnMsIHRvIGJvb3N0IGxhbmd1YWdlIHJlcGxhY2VtZW50cyBvciBzYXZlc1xuICogcmVkdW5kYW50IHJlcGxhY2VtZW50cyBpbiBkb20gdHJlZS5cbiAqIEBwcm9wZXJ0eSBfJGRvbU5vZGVUb0ZhZGUgLSBTYXZlcyBhbGwgJC1leHRlbmRlZCBkb20gbm9kZXMgd2hpY2ggc2hvdWxkIGJlXG4gKiBhbmltYXRlZC5cbiAqIEBwcm9wZXJ0eSBfcmVwbGFjZW1lbnRzIC0gU2F2ZXMgYWxsIHRleHQgbm9kZXMgd2hpY2ggc2hvdWxkIGJlIHJlcGxhY2VkLlxuICogQHByb3BlcnR5IF90ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbiAtIFNhdmVzIGEgbWFwcGluZyBvZiBrbm93biB0ZXh0XG4gKiBzbmlwcGV0cyB0byB0aGVpciBjb3JyZXNwb25kaW5nICQtZXh0ZW5kZWQgZG9tIG5vZGVzLlxuICovXG5jbGFzcyBMYW5nIGV4dGVuZHMgJC5Ub29scy5jbGFzcyB7XG4gICAgLy8gcmVnaW9uIHN0YXRpYyBwcm9wZXJ0aWVzXG4gICAgc3RhdGljIF9uYW1lOnN0cmluZyA9ICdMYW5nJ1xuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBkeW5hbWljIHByb3BlcnRpZXNcbiAgICBjdXJyZW50TGFuZ3VhZ2U6c3RyaW5nXG4gICAga25vd25UcmFuc2xhdGlvbnM6e1trZXk6c3RyaW5nXTpzdHJpbmd9XG4gICAgXyRkb21Ob2RlVG9GYWRlOj8kRG9tTm9kZVxuICAgIF9yZXBsYWNlbWVudHM6QXJyYXk8UmVwbGFjZW1lbnQ+XG4gICAgX3RleHROb2Rlc1dpdGhLbm93blRyYW5zbGF0aW9uOntba2V5OnN0cmluZ106JERvbU5vZGV9O1xuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBwdWJsaWMgbWV0aG9kc1xuICAgIC8vIC8gcmVnaW9uIHNwZWNpYWxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9yZXF1aXJlLWRlc2NyaXB0aW9uLWNvbXBsZXRlLXNlbnRlbmNlICovXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbi4gQ3VycmVudCBsYW5ndWFnZSBpcyBzZXQgYW5kIGxhdGVyIG5lZWRlZCBkb21cbiAgICAgKiBub2RlcyBhcmUgZ3JhYmJlZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBjdXJyZW50TGFuZ3VhZ2UgLSBJbml0aWFsIGxhbmd1YWdlIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0ga25vd25UcmFuc2xhdGlvbiAtIEluaXRpYWwgbWFwcGluZyBvZiBrbm93biBsYW5ndWFnZSBzdHJpbmdzIGFuZFxuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgdHJhbnNsYXRpb25zLCB0byBib29zdCBsYW5ndWFnZSByZXBsYWNlbWVudHMgb3JcbiAgICAgKiBzYXZlcyByZWR1bmRhbnQgcmVwbGFjZW1lbnRzIGluIGRvbSB0cmVlLlxuICAgICAqIEBwYXJhbSAkZG9tTm9kZVRvRmFkZSAtIEluaXRpYWwgZG9tIG5vZGUgdG8gZmFkZS5cbiAgICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIC0gSW5pdGlhbCBub2RlcyB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB0ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbiAtIFNhdmVzIGEgbWFwcGluZyBvZiBrbm93biB0ZXh0XG4gICAgICogc25pcHBldHMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyAkLWV4dGVuZGVkIGRvbSBub2Rlcy5cbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBjdXJyZW50IGluc3RhbmNlIHdyYXBwZWQgaW4gYSBwcm9taXNlLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6T2JqZWN0ID0ge30sIGN1cnJlbnRMYW5ndWFnZTpzdHJpbmcgPSAnJyxcbiAgICAgICAga25vd25UcmFuc2xhdGlvbjp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7fSxcbiAgICAgICAgJGRvbU5vZGVUb0ZhZGU6PyREb21Ob2RlID0gbnVsbCwgcmVwbGFjZW1lbnRzOkFycmF5PFJlcGxhY2VtZW50PiA9IFtdLFxuICAgICAgICB0ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbjp7W2tleTpzdHJpbmddOiREb21Ob2RlfSA9IHt9XG4gICAgKTokRGVmZXJyZWQ8TGFuZz4ge1xuICAgIC8qIGVzbGludC1lbmFibGUganNkb2MvcmVxdWlyZS1kZXNjcmlwdGlvbi1jb21wbGV0ZS1zZW50ZW5jZSAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IGN1cnJlbnRMYW5ndWFnZVxuICAgICAgICB0aGlzLmtub3duVHJhbnNsYXRpb24gPSBrbm93blRyYW5zbGF0aW9uXG4gICAgICAgIHRoaXMuXyRkb21Ob2RlVG9GYWRlID0gJGRvbU5vZGVUb0ZhZGVcbiAgICAgICAgdGhpcy5fcmVwbGFjZW1lbnRzID0gcmVwbGFjZW1lbnRzXG4gICAgICAgIHRoaXMuX3RleHROb2Rlc1dpdGhLbm93blRyYW5zbGF0aW9uID0gdGV4dE5vZGVzV2l0aEtub3duVHJhbnNsYXRpb25cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGRvbU5vZGVTZWxlY3RvclByZWZpeDogJ2JvZHknLFxuICAgICAgICAgICAgZGVmYXVsdDogJ2VuVVMnLFxuICAgICAgICAgICAgYWxsb3dlZExhbmd1YWdlczogW10sXG4gICAgICAgICAgICBpbml0aWFsOiBudWxsLFxuICAgICAgICAgICAgdGVtcGxhdGVEZWxpbWl0ZXI6IHtwcmU6ICd7eycsIHBvc3Q6ICd9fSd9LFxuICAgICAgICAgICAgZmFkZUVmZmVjdDogdHJ1ZSxcbiAgICAgICAgICAgIHRleHROb2RlUGFyZW50OiB7XG4gICAgICAgICAgICAgICAgc2hvd0FuaW1hdGlvbjogW3tvcGFjaXR5OiAxfSwge2R1cmF0aW9uOiAnZmFzdCd9XSxcbiAgICAgICAgICAgICAgICBoaWRlQW5pbWF0aW9uOiBbe29wYWNpdHk6IDB9LCB7ZHVyYXRpb246ICdmYXN0J31dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlUmVwbGFjZW1lbnRMYW5ndWFnZVBhdHRlcm46ICdeXFxcXHwoezF9KSQnLFxuICAgICAgICAgICAgcmVwbGFjZW1lbnRMYW5ndWFnZVBhdHRlcm46ICdeKFthLXpdezJ9W0EtWl17Mn0pOigoLnxcXFxccykqKSQnLFxuICAgICAgICAgICAgY3VycmVudExhbmd1YWdlUGF0dGVybjogJ15bYS16XXsyfVtBLVpdezJ9JCcsXG4gICAgICAgICAgICByZXBsYWNlbWVudERvbU5vZGVOYW1lOiBbJyNjb21tZW50JywgJ2xhbmdyZXBsYWNlbWVudCddLFxuICAgICAgICAgICAgcmVwbGFjZURvbU5vZGVOYW1lczogWycjdGV4dCcsICdsYW5ncmVwbGFjZSddLFxuICAgICAgICAgICAgdG9vbHNMb2NrRGVzY3JpcHRpb246ICd7MX1Td2l0Y2gnLFxuICAgICAgICAgICAgbGFuZ3VhZ2VIYXNoUHJlZml4OiAnbGFuZy0nLFxuICAgICAgICAgICAgY3VycmVudExhbmd1YWdlSW5kaWNhdG9yQ2xhc3NOYW1lOiAnY3VycmVudCcsXG4gICAgICAgICAgICBzZXNzaW9uRGVzY3JpcHRpb246ICd7MX0nLFxuICAgICAgICAgICAgbGFuZ3VhZ2VNYXBwaW5nOiB7XG4gICAgICAgICAgICAgICAgZGVERTogWydkZScsICdkZV9kZScsICdkZS1kZScsICdnZXJtYW4nLCAnZGV1dHNjaCddLFxuICAgICAgICAgICAgICAgIGVuVVM6IFsnZW4nLCAnZW5fdXMnLCAnZW4tdXMnXSxcbiAgICAgICAgICAgICAgICBlbkVOOiBbJ2VuX2VuJywgJ2VuLWVuJywgJ2VuZ2xpc2gnXSxcbiAgICAgICAgICAgICAgICBmckZSOiBbJ2ZyJywgJ2ZyX2ZyJywgJ2ZyLWZyJywgJ2ZyZW5jaCddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25Td2l0Y2hlZDogJC5ub29wKCksXG4gICAgICAgICAgICBvbkVuc3VyZWQ6ICQubm9vcCgpLFxuICAgICAgICAgICAgb25Td2l0Y2g6ICQubm9vcCgpLFxuICAgICAgICAgICAgb25FbnN1cmU6ICQubm9vcCgpLFxuICAgICAgICAgICAgZG9tTm9kZToge2tub3duVHJhbnNsYXRpb246ICdkaXYudG9jJ31cbiAgICAgICAgfVxuICAgICAgICBzdXBlci5pbml0aWFsaXplKG9wdGlvbnMpXG4gICAgICAgIHRoaXMuX29wdGlvbnMucHJlUmVwbGFjZW1lbnRMYW5ndWFnZVBhdHRlcm4gPVxuICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5zdHJpbmdGb3JtYXQoXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5wcmVSZXBsYWNlbWVudExhbmd1YWdlUGF0dGVybixcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnJlcGxhY2VtZW50TGFuZ3VhZ2VQYXR0ZXJuLnN1YnN0cihcbiAgICAgICAgICAgICAgICAgICAgMSwgdGhpcy5fb3B0aW9ucy5yZXBsYWNlbWVudExhbmd1YWdlUGF0dGVybi5sZW5ndGggLSAyKSlcbiAgICAgICAgdGhpcy5fb3B0aW9ucy50b29sc0xvY2tEZXNjcmlwdGlvbiA9IHRoaXMuY29uc3RydWN0b3Iuc3RyaW5nRm9ybWF0KFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy50b29sc0xvY2tEZXNjcmlwdGlvbiwgdGhpcy5jb25zdHJ1Y3Rvci5fbmFtZSlcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5zZXNzaW9uRGVzY3JpcHRpb24gPSB0aGlzLmNvbnN0cnVjdG9yLnN0cmluZ0Zvcm1hdChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuc2Vzc2lvbkRlc2NyaXB0aW9uLCB0aGlzLmNvbnN0cnVjdG9yLl9uYW1lKVxuICAgICAgICB0aGlzLiRkb21Ob2RlcyA9IHRoaXMuZ3JhYkRvbU5vZGUodGhpcy5fb3B0aW9ucy5kb21Ob2RlKVxuICAgICAgICB0aGlzLiRkb21Ob2Rlcy5zd2l0Y2hMYW5ndWFnZUJ1dHRvbnMgPSAkKFxuICAgICAgICAgICAgYGFbaHJlZl49XCIjJHt0aGlzLl9vcHRpb25zLmxhbmd1YWdlSGFzaFByZWZpeH1cIl1gKVxuICAgICAgICB0aGlzLl9tb3ZlUHJlUmVwbGFjZW1lbnROb2RlcygpXG4gICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gdGhpcy5fbm9ybWFsaXplTGFuZ3VhZ2UodGhpcy5fb3B0aW9ucy5kZWZhdWx0KVxuICAgICAgICAvKlxuICAgICAgICAgICAgTk9URTogT25seSBzd2l0Y2ggY3VycmVudCBsYW5ndWFnZSBpbmRpY2F0b3IgaWYgd2UgaGF2ZW4ndCBhblxuICAgICAgICAgICAgaW5pdGlhbCBsYW5ndWFnZSBzd2l0Y2ggd2hpY2ggd2lsbCBwZXJmb3JtIHRoZSBpbmRpY2F0b3Igc3dpdGNoLlxuICAgICAgICAqL1xuICAgICAgICBjb25zdCBuZXdMYW5ndWFnZTpzdHJpbmcgPSB0aGlzLl9kZXRlcm1pbmVVc2VmdWxMYW5ndWFnZSgpXG4gICAgICAgIHRoaXMub24odGhpcy4kZG9tTm9kZXMuc3dpdGNoTGFuZ3VhZ2VCdXR0b25zLCAnY2xpY2snLCAoXG4gICAgICAgICAgICBldmVudDpPYmplY3RcbiAgICAgICAgKTokRGVmZXJyZWQ8TGFuZz4gPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3dpdGNoKCQoZXZlbnQudGFyZ2V0KS5hdHRyKCdocmVmJykuc3Vic3RyKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VIYXNoUHJlZml4Lmxlbmd0aCArIDEpKVxuICAgICAgICB9KVxuICAgICAgICBpZiAodGhpcy5jdXJyZW50TGFuZ3VhZ2UgPT09IG5ld0xhbmd1YWdlKVxuICAgICAgICAgICAgcmV0dXJuICQud2hlbih0aGlzLl9zd2l0Y2hDdXJyZW50TGFuZ3VhZ2VJbmRpY2F0b3IobmV3TGFuZ3VhZ2UpKVxuICAgICAgICByZXR1cm4gdGhpcy5zd2l0Y2gobmV3TGFuZ3VhZ2UsIHRydWUpXG4gICAgfVxuICAgIC8vIC8gZW5kcmVnaW9uXG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgdG8gZ2l2ZW4gbGFuZ3VhZ2UuIFRoaXMgbWV0aG9kIGlzIG11dHVhbFxuICAgICAqIHN5bmNocm9uaXplZC5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgLSBOZXcgbGFuZ3VhZ2UgYXMgc3RyaW5nIG9yIFwidHJ1ZVwiLiBJZiBzZXQgdG8gXCJ0cnVlXCIgaXRcbiAgICAgKiBpbmRpY2F0ZXMgdGhhdCB0aGUgZG9tIHRyZWUgc2hvdWxkIGJlIGNoZWNrZWQgYWdhaW4gY3VycmVudCBsYW5ndWFnZSB0b1xuICAgICAqIGVuc3VyZSBldmVyeSB0ZXh0IG5vZGUgaGFzIHJpZ2h0IGNvbnRlbnQuXG4gICAgICogQHBhcmFtIGVuc3VyZSAtIEluZGljYXRlcyBpZiBhIHN3aXRjaCBlZmZlY3Qgc2hvdWxkIGJlIGF2b2lkZWQuXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZSB3cmFwcGVkIGluIGEgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBzd2l0Y2gobGFuZ3VhZ2U6c3RyaW5nfHRydWUsIGVuc3VyZTpib29sZWFuID0gZmFsc2UpOiREZWZlcnJlZDxMYW5nPiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxhbmd1YWdlICE9PSB0cnVlICYmIHRoaXMuX29wdGlvbnMuYWxsb3dlZExhbmd1YWdlcy5sZW5ndGggJiZcbiAgICAgICAgICAgICF0aGlzLl9vcHRpb25zLmFsbG93ZWRMYW5ndWFnZXMuaW5jbHVkZXMobGFuZ3VhZ2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZygnXCJ7MX1cIiBpc25cXCd0IG9uZSBvZiB0aGUgYWxsb3dlZCBsYW5ndWFnZXMuJywgbGFuZ3VhZ2UpXG4gICAgICAgICAgICByZXR1cm4gJC53aGVuKHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmZXJyZWQ6JERlZmVycmVkPExhbmc+ID0gJC5EZWZlcnJlZCgpXG4gICAgICAgIHRoaXMuYWNxdWlyZUxvY2sodGhpcy5fb3B0aW9ucy50b29sc0xvY2tEZXNjcmlwdGlvbiwgKCk6dm9pZCA9PiB7XG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBlbnN1cmUgPSB0cnVlXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPSB0aGlzLmN1cnJlbnRMYW5ndWFnZVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPSB0aGlzLl9ub3JtYWxpemVMYW5ndWFnZShsYW5ndWFnZSlcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBlbnN1cmUgJiYgbGFuZ3VhZ2UgIT09IHRoaXMuX29wdGlvbnMuZGVmYXVsdCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlICE9PSBsYW5ndWFnZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbkRlc2NyaXB0aW9uOnN0cmluZyA9ICdTd2l0Y2ggdG8nXG4gICAgICAgICAgICAgICAgaWYgKGVuc3VyZSlcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uRGVzY3JpcHRpb24gPSAnRW5zdXJlJ1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJ3sxfSBcInsyfVwiLicsIGFjdGlvbkRlc2NyaXB0aW9uLCBsYW5ndWFnZSlcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2l0Y2hDdXJyZW50TGFuZ3VhZ2VJbmRpY2F0b3IobGFuZ3VhZ2UpXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIChlbnN1cmUgPyAnZW5zdXJlJyA6ICdzd2l0Y2gnKSwgdHJ1ZSwgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UsIGxhbmd1YWdlKVxuICAgICAgICAgICAgICAgIHRoaXMuXyRkb21Ob2RlVG9GYWRlID0gbnVsbFxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VtZW50cyA9IFtdXG4gICAgICAgICAgICAgICAgY29uc3QgW1xuICAgICAgICAgICAgICAgICAgICAkbGFzdFRleHROb2RlVG9UcmFuc2xhdGU6JERvbU5vZGUsXG4gICAgICAgICAgICAgICAgICAgICRsYXN0TGFuZ3VhZ2VEb21Ob2RlOiREb21Ob2RlXG4gICAgICAgICAgICAgICAgXSA9IHRoaXMuX2NvbGxlY3RUZXh0Tm9kZXNUb1JlcGxhY2UobGFuZ3VhZ2UsIGVuc3VyZSlcbiAgICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVMYXN0VGV4dE5vZGVIYXZpbmdMYW5ndWFnZUluZGljYXRvcihcbiAgICAgICAgICAgICAgICAgICAgJGxhc3RUZXh0Tm9kZVRvVHJhbnNsYXRlLCAkbGFzdExhbmd1YWdlRG9tTm9kZSwgZW5zdXJlKVxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVN3aXRjaEVmZmVjdChsYW5ndWFnZSwgZW5zdXJlKS50aGVuKChcbiAgICAgICAgICAgICAgICApOiREZWZlcnJlZDxMYW5nPiA9PiBkZWZlcnJlZC5yZXNvbHZlKHRoaXMpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAnXCJ7MX1cIiBpcyBhbHJlYWR5IGN1cnJlbnQgc2VsZWN0ZWQgbGFuZ3VhZ2UuJywgbGFuZ3VhZ2UpXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxlYXNlTG9jayh0aGlzLl9vcHRpb25zLnRvb2xzTG9ja0Rlc2NyaXB0aW9uKVxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgY3VycmVudCBzZWxlY3RlZCBsYW5ndWFnZS5cbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBjdXJyZW50IGluc3RhbmNlIHdyYXBwZWQgaW4gYSBwcm9taXNlLlxuICAgICAqL1xuICAgIHJlZnJlc2goKTokRGVmZXJyZWQ8TGFuZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW92ZVByZVJlcGxhY2VtZW50Tm9kZXMoKS5zd2l0Y2godHJ1ZSlcbiAgICB9XG4gICAgLy8gLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gcHJvdGVjdGVkIG1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBNb3ZlcyBwcmUgcmVwbGFjZW1lbnQgZG9tIG5vZGVzIGludG8gbmV4dCBkb20gbm9kZSBiZWhpbmQgdHJhbnNsYXRpb25cbiAgICAgKiB0ZXh0IHRvIHVzZSB0aGUgc2FtZSB0cmFuc2xhdGlvbiBhbGdvcml0aG0gZm9yIGJvdGguXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfbW92ZVByZVJlcGxhY2VtZW50Tm9kZXMoKTpMYW5nIHtcbiAgICAgICAgY29uc3Qgc2VsZjpMYW5nID0gdGhpc1xuICAgICAgICB0aGlzLiRkb21Ob2Rlcy5wYXJlbnQuZmluZCgnOm5vdChpZnJhbWUpJykuY29udGVudHMoXG4gICAgICAgICkuZWFjaChmdW5jdGlvbigpOnZvaWQge1xuICAgICAgICAgICAgY29uc3QgJHRoaXM6JERvbU5vZGUgPSAkKHRoaXMpXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZTpzdHJpbmcgPSAkdGhpcy5wcm9wKCdub2RlTmFtZScpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIGlmIChzZWxmLl9vcHRpb25zLnJlcGxhY2VtZW50RG9tTm9kZU5hbWUuaW5jbHVkZXMobm9kZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFbJyNjb21tZW50JywgJyN0ZXh0J10uaW5jbHVkZXMobm9kZU5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBIaWRlIHJlcGxhY2VtZW50IGRvbSBub2Rlcy5cbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuaGlkZSgpXG4gICAgICAgICAgICAgICAgY29uc3QgcmVndWxhckV4cHJlc3Npb246UmVnRXhwID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb3B0aW9ucy5wcmVSZXBsYWNlbWVudExhbmd1YWdlUGF0dGVybilcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaDo/QXJyYXk8c3RyaW5nPiA9ICR0aGlzLnByb3AoJ3RleHRDb250ZW50JykubWF0Y2goXG4gICAgICAgICAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uKVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFswXSkge1xuICAgICAgICAgICAgICAgICAgICAkdGhpcy5wcm9wKCd0ZXh0Q29udGVudCcsICR0aGlzLnByb3AoXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dENvbnRlbnQnXG4gICAgICAgICAgICAgICAgICAgICkucmVwbGFjZShyZWd1bGFyRXhwcmVzc2lvbiwgbWF0Y2hbMV0pKVxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZkZvdW5kOmJvb2xlYW4gPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5wYXJlbnQoKS5jb250ZW50cygpLmVhY2goZnVuY3Rpb24oKTo/ZmFsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGZGb3VuZCAmJiAkKHRoaXMpLlRvb2xzKCdnZXRUZXh0JykudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuYXBwZW5kVG8odGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGhpc1swXSA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmRm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0cyBhbGwgdGV4dCBub2RlcyB3aGljaCBzaG91bGQgYmUgcmVwbGFjZWQgbGF0ZXIuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIC0gTmV3IGxhbmd1YWdlIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gZW5zdXJlIC0gSW5kaWNhdGVzIGlmIHRoZSB3aG9sZSBkb20gc2hvdWxkIGJlIGNoZWNrZWQgYWdhaW5cbiAgICAgKiBjdXJyZW50IGxhbmd1YWdlIHRvIGVuc3VyZSBldmVyeSB0ZXh0IG5vZGUgaGFzIHJpZ2h0IGNvbnRlbnQuXG4gICAgICogQHJldHVybnMgUmV0dXJuIGEgdHVwbGUgb2YgbGFzdCB0ZXh0IGFuZCBsYW5ndWFnZSBkb20gbm9kZSB0byB0cmFuc2xhdGUuXG4gICAgICovXG4gICAgX2NvbGxlY3RUZXh0Tm9kZXNUb1JlcGxhY2UoXG4gICAgICAgIGxhbmd1YWdlOnN0cmluZywgZW5zdXJlOmJvb2xlYW5cbiAgICApOkFycmF5PD8kRG9tTm9kZT4ge1xuICAgICAgICBsZXQgJGN1cnJlbnRUZXh0Tm9kZVRvVHJhbnNsYXRlOj8kRG9tTm9kZSA9IG51bGxcbiAgICAgICAgbGV0ICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlOj8kRG9tTm9kZSA9IG51bGxcbiAgICAgICAgbGV0ICRsYXN0VGV4dE5vZGVUb1RyYW5zbGF0ZTo/JERvbU5vZGUgPSBudWxsXG4gICAgICAgIGxldCAkbGFzdExhbmd1YWdlRG9tTm9kZTo/JERvbU5vZGUgPSBudWxsXG4gICAgICAgIHRoaXMua25vd25UcmFuc2xhdGlvbiA9IHt9XG4gICAgICAgIGNvbnN0IHNlbGY6TGFuZyA9IHRoaXNcbiAgICAgICAgdGhpcy4kZG9tTm9kZXMucGFyZW50LmZpbmQoJzpub3QoaWZyYW1lKScpLmNvbnRlbnRzKCkuZWFjaChmdW5jdGlvbihcbiAgICAgICAgKTo/dHJ1ZSB7XG4gICAgICAgICAgICBjb25zdCAkY3VycmVudERvbU5vZGU6JERvbU5vZGUgPSAkKHRoaXMpXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZTpzdHJpbmcgPSAkY3VycmVudERvbU5vZGUucHJvcChcbiAgICAgICAgICAgICAgICAnbm9kZU5hbWUnXG4gICAgICAgICAgICApLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIGlmIChzZWxmLl9vcHRpb25zLnJlcGxhY2VEb21Ob2RlTmFtZXMuaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgbm9kZU5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgIC8vIE5PVEU6IFdlIHNraXAgZW1wdHkgYW5kIG5lc3RlZCB0ZXh0IG5vZGVzXG4gICAgICAgICAgICAgICAgaWYgKCRjdXJyZW50RG9tTm9kZS5Ub29scyhcbiAgICAgICAgICAgICAgICAgICAgJ2dldFRleHQnXG4gICAgICAgICAgICAgICAgKS50cmltKCkgJiYgJGN1cnJlbnREb21Ob2RlLnBhcmVudHMoXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX29wdGlvbnMucmVwbGFjZURvbU5vZGVOYW1lcy5qb2luKClcbiAgICAgICAgICAgICAgICApLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAkbGFzdExhbmd1YWdlRG9tTm9kZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9lbnN1cmVMYXN0VGV4dE5vZGVIYXZpbmdMYW5ndWFnZUluZGljYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGFzdFRleHROb2RlVG9UcmFuc2xhdGUsICRsYXN0TGFuZ3VhZ2VEb21Ob2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuc3VyZSlcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRUZXh0Tm9kZVRvVHJhbnNsYXRlID0gJGN1cnJlbnREb21Ob2RlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICgkY3VycmVudFRleHROb2RlVG9UcmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fb3B0aW9ucy5yZXBsYWNlbWVudERvbU5vZGVOYW1lLmluY2x1ZGVzKG5vZGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudDpzdHJpbmcgPSAkY3VycmVudERvbU5vZGUucHJvcCgndGV4dENvbnRlbnQnKVxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgIT09ICcjY29tbWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJGN1cnJlbnREb21Ob2RlLmh0bWwoKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaDo/QXJyYXk8c3RyaW5nPiA9IGNvbnRlbnQubWF0Y2gobmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX29wdGlvbnMucmVwbGFjZW1lbnRMYW5ndWFnZVBhdHRlcm4pKVxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaCkgJiYgbWF0Y2hbMV0gPT09IGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIGtub3duIHRleHQgdHJhbnNsYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5rbm93blRyYW5zbGF0aW9uW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VGV4dE5vZGVUb1RyYW5zbGF0ZS5Ub29scygnZ2V0VGV4dCcpLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSA9IG1hdGNoWzJdLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVnaXN0ZXJUZXh0Tm9kZVRvQ2hhbmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50VGV4dE5vZGVUb1RyYW5zbGF0ZSwgJGN1cnJlbnREb21Ob2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoLCAkY3VycmVudExhbmd1YWdlRG9tTm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRsYXN0VGV4dE5vZGVUb1RyYW5zbGF0ZSA9ICRjdXJyZW50VGV4dE5vZGVUb1RyYW5zbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgJGxhc3RMYW5ndWFnZURvbU5vZGUgPSAkY3VycmVudExhbmd1YWdlRG9tTm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRUZXh0Tm9kZVRvVHJhbnNsYXRlID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRMYW5ndWFnZURvbU5vZGUgPSBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGN1cnJlbnREb21Ob2RlLnByb3AoJ3RleHRDb250ZW50JykubWF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKHNlbGYuX29wdGlvbnMuY3VycmVudExhbmd1YWdlUGF0dGVybilcbiAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlID0gJGN1cnJlbnREb21Ob2RlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRsYXN0VGV4dE5vZGVUb1RyYW5zbGF0ZSA9IG51bGxcbiAgICAgICAgICAgICAgICAkbGFzdExhbmd1YWdlRG9tTm9kZSA9IG51bGxcbiAgICAgICAgICAgICAgICAkY3VycmVudFRleHROb2RlVG9UcmFuc2xhdGUgPSBudWxsXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRMYW5ndWFnZURvbU5vZGUgPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyS25vd25UZXh0Tm9kZXMoKVxuICAgICAgICByZXR1cm4gWyRsYXN0VGV4dE5vZGVUb1RyYW5zbGF0ZSwgJGxhc3RMYW5ndWFnZURvbU5vZGVdXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIGFsbCB0ZXh0IG5vZGVzIGluIGxhbmd1YWdlIGtub3duIGFyZWEgd2l0aCBrbm93biB0cmFuc2xhdGlvbnMuXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJLbm93blRleHROb2RlcygpOkxhbmcge1xuICAgICAgICB0aGlzLl90ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbiA9IHt9XG4gICAgICAgIGNvbnN0IHNlbGY6TGFuZyA9IHRoaXNcbiAgICAgICAgdGhpcy4kZG9tTm9kZXMua25vd25UcmFuc2xhdGlvbi5maW5kKCc6bm90KGlmcmFtZSknKS5jb250ZW50cyhcbiAgICAgICAgKS5lYWNoKGZ1bmN0aW9uKCk6dm9pZCB7XG4gICAgICAgICAgICBjb25zdCAkY3VycmVudERvbU5vZGU6JERvbU5vZGUgPSAkKHRoaXMpXG4gICAgICAgICAgICAvLyBOT1RFOiBXZSBza2lwIGVtcHR5IGFuZCBuZXN0ZWQgdGV4dCBub2Rlcy5cbiAgICAgICAgICAgIGlmICghc2VsZi5fb3B0aW9ucy5yZXBsYWNlRG9tTm9kZU5hbWVzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICRjdXJyZW50RG9tTm9kZS5wcm9wKCdub2RlTmFtZScpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICkgJiYgJGN1cnJlbnREb21Ob2RlLlRvb2xzKCdnZXRUZXh0JykudHJpbSgpICYmXG4gICAgICAgICAgICAkY3VycmVudERvbU5vZGUucGFyZW50cyhcbiAgICAgICAgICAgICAgICBzZWxmLl9vcHRpb25zLnJlcGxhY2VEb21Ob2RlTmFtZXMuam9pbigpXG4gICAgICAgICAgICApLmxlbmd0aCA9PT0gMCAmJiBzZWxmLmtub3duVHJhbnNsYXRpb24uaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgJGN1cnJlbnREb21Ob2RlLlRvb2xzKCdnZXRUZXh0JykudHJpbSgpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fYWRkVGV4dE5vZGVUb0ZhZGUoJGN1cnJlbnREb21Ob2RlKVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLl90ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbi5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5rbm93blRyYW5zbGF0aW9uWyRjdXJyZW50RG9tTm9kZS5wcm9wKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHRDb250ZW50J1xuICAgICAgICAgICAgICAgICAgICApLnRyaW0oKV1cbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLl90ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbltzZWxmLmtub3duVHJhbnNsYXRpb25bXG4gICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudERvbU5vZGUucHJvcCgndGV4dENvbnRlbnQnKS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgXV0gPSBzZWxmLl90ZXh0Tm9kZXNXaXRoS25vd25UcmFuc2xhdGlvbltcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYua25vd25UcmFuc2xhdGlvblskY3VycmVudERvbU5vZGUucHJvcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dENvbnRlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICApLnRyaW0oKV1cbiAgICAgICAgICAgICAgICAgICAgXS5hZGQoJGN1cnJlbnREb21Ob2RlKVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdGV4dE5vZGVzV2l0aEtub3duVHJhbnNsYXRpb25bc2VsZi5rbm93blRyYW5zbGF0aW9uW1xuICAgICAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnREb21Ob2RlLnByb3AoJ3RleHRDb250ZW50JykudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIF1dID0gJGN1cnJlbnREb21Ob2RlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgYSBnaXZlbiBsYW5ndWFnZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIC0gTmV3IGxhbmd1YWdlIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBub3JtYWxpemVkIHZlcnNpb24gb2YgZ2l2ZW4gbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgX25vcm1hbGl6ZUxhbmd1YWdlKGxhbmd1YWdlOnN0cmluZyk6c3RyaW5nIHtcbiAgICAgICAgZm9yIChjb25zdCBvdGhlckxhbmd1YWdlOnN0cmluZyBpbiB0aGlzLl9vcHRpb25zLmxhbmd1YWdlTWFwcGluZylcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmxhbmd1YWdlTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShvdGhlckxhbmd1YWdlKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5sYW5ndWFnZU1hcHBpbmdbb3RoZXJMYW5ndWFnZV0uaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgICAgIG90aGVyTGFuZ3VhZ2UudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VNYXBwaW5nW290aGVyTGFuZ3VhZ2VdLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlckxhbmd1YWdlLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VNYXBwaW5nW290aGVyTGFuZ3VhZ2VdLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyTGFuZ3VhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZGVmYXVsdFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGEgdXNlZnVsIGluaXRpYWwgbGFuZ3VhZ2UgZGVwZW5kaW5nIG9uIHNlc3Npb24gYW5kIGJyb3dzZXJcbiAgICAgKiBzZXR0aW5ncy5cbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBkZXRlcm1pbmVkIGxhbmd1YWdlLlxuICAgICAqL1xuICAgIF9kZXRlcm1pbmVVc2VmdWxMYW5ndWFnZSgpOnN0cmluZyB7XG4gICAgICAgIGxldCByZXN1bHQ6c3RyaW5nXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmluaXRpYWwpXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9vcHRpb25zLmluaXRpYWxcbiAgICAgICAgZWxzZSBpZiAoJ2xvY2FsU3RvcmFnZScgaW4gY29udGV4dCAmJiBjb250ZXh0LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5zZXNzaW9uRGVzY3JpcHRpb25cbiAgICAgICAgKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gY29udGV4dC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnNlc3Npb25EZXNjcmlwdGlvbilcbiAgICAgICAgICAgIHRoaXMuZGVidWcoXG4gICAgICAgICAgICAgICAgJ0RldGVybWluZSBcInsxfVwiLCBiZWNhdXNlIG9mIGxvY2FsIHN0b3JhZ2UgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgICAgICAgICByZXN1bHQpXG4gICAgICAgIH0gZWxzZSBpZiAoJ25hdmlnYXRvcicgaW4gY29udGV4dCAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5hdmlnYXRvci5sYW5ndWFnZVxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcbiAgICAgICAgICAgICAgICAnRGV0ZXJtaW5lIFwiezF9XCIsIGJlY2F1c2Ugb2YgYnJvd3NlciBzZXR0aW5ncy4nLCByZXN1bHQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9vcHRpb25zLmRlZmF1bHRcbiAgICAgICAgICAgIHRoaXMuZGVidWcoJ0RldGVybWluZSBcInsxfVwiLCBiZWNhdXNlIG9mIGRlZmF1bHQgb3B0aW9uLicsIHJlc3VsdClcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLl9ub3JtYWxpemVMYW5ndWFnZShyZXN1bHQpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYWxsb3dlZExhbmd1YWdlcy5sZW5ndGggJiZcbiAgICAgICAgICAgICF0aGlzLl9vcHRpb25zLmFsbG93ZWRMYW5ndWFnZXMuaW5jbHVkZXMocmVzdWx0KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcoXG4gICAgICAgICAgICAgICAgJ1wiezF9XCIgaXNuXFwndCBvbmUgb2YgdGhlIGFsbG93ZWQgbGFuZ3VhZ2VzLiBTZXQgbGFuZ3VhZ2UnICtcbiAgICAgICAgICAgICAgICAnIHRvIFwiezJ9XCIuJywgcmVzdWx0LCB0aGlzLl9vcHRpb25zLmFsbG93ZWRMYW5ndWFnZXNbMF0pXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9vcHRpb25zLmFsbG93ZWRMYW5ndWFnZXNbMF1cbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2xvY2FsU3RvcmFnZScgaW4gY29udGV4dClcbiAgICAgICAgICAgIGNvbnRleHQubG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5zZXNzaW9uRGVzY3JpcHRpb24sIHJlc3VsdClcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXBlbmRpbmcgYW4gYWN0aXZhdGVkIHN3aXRjaGluZyBlZmZlY3QgdGhpcyBtZXRob2QgaW5pdGlhbGl6ZWQgdGhlXG4gICAgICogZWZmZWN0IG9mIHJlcGxhY2UgYWxsIHRleHQgc3RyaW5nIGRpcmVjdGx5LlxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSAtIE5ldyBsYW5ndWFnZSB0byB1c2UuXG4gICAgICogQHBhcmFtIGVuc3VyZSAtIEluZGljYXRlcyBpZiBjdXJyZW50IGxhbmd1YWdlIHNob3VsZCBiZSBlbnN1cmVkIGFnYWluXG4gICAgICogZXZlcnkgdGV4dCBub2RlIGNvbnRlbnQuXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZSB3cmFwcGVkIGluIGEgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBfaGFuZGxlU3dpdGNoRWZmZWN0KGxhbmd1YWdlOnN0cmluZywgZW5zdXJlOmJvb2xlYW4pOiREZWZlcnJlZDxMYW5nPiB7XG4gICAgICAgIGNvbnN0IG9sZExhbmd1YWdlOnN0cmluZyA9IHRoaXMuY3VycmVudExhbmd1YWdlXG4gICAgICAgIGlmICghZW5zdXJlICYmIHRoaXMuX29wdGlvbnMuZmFkZUVmZmVjdCAmJiB0aGlzLl8kZG9tTm9kZVRvRmFkZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl8kZG9tTm9kZVRvRmFkZS5hbmltYXRlLmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMuXyRkb21Ob2RlVG9GYWRlLFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGV4dE5vZGVQYXJlbnQuaGlkZUFuaW1hdGlvblxuICAgICAgICAgICAgKS5wcm9taXNlKCkudGhlbigoKTokRGVmZXJyZWQ8TGFuZz4gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N3aXRjaExhbmd1YWdlKGxhbmd1YWdlKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl8kZG9tTm9kZVRvRmFkZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXyRkb21Ob2RlVG9GYWRlLmFuaW1hdGUuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZG9tTm9kZVRvRmFkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGV4dE5vZGVQYXJlbnQuc2hvd0FuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICApLnByb21pc2UoKS50aGVuKCgpOiREZWZlcnJlZDxMYW5nPiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5zdXJlID8gJ2Vuc3VyZWQnIDogJ3N3aXRjaGVkJyksIHRydWUsIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkTGFuZ3VhZ2UsIGxhbmd1YWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxlYXNlTG9jayh0aGlzLl9vcHRpb25zLnRvb2xzTG9ja0Rlc2NyaXB0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQud2hlbih0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVybiAkLndoZW4odGhpcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIHRoaXMuX3N3aXRjaExhbmd1YWdlKGxhbmd1YWdlKVxuICAgICAgICB0aGlzLmZpcmVFdmVudChcbiAgICAgICAgICAgIChlbnN1cmUgPyAnZW5zdXJlZCcgOiAnc3dpdGNoZWQnKSwgdHJ1ZSwgdGhpcywgb2xkTGFuZ3VhZ2UsXG4gICAgICAgICAgICBsYW5ndWFnZSlcbiAgICAgICAgdGhpcy5yZWxlYXNlTG9jayh0aGlzLl9vcHRpb25zLnRvb2xzTG9ja0Rlc2NyaXB0aW9uKVxuICAgICAgICByZXR1cm4gJC53aGVuKHRoaXMpXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIHRleHQgbm9kZSB0byBjaGFuZ2UgaXRzIGNvbnRlbnQgd2l0aCBnaXZlbiByZXBsYWNlbWVudC5cbiAgICAgKiBAcGFyYW0gJHRleHROb2RlIC0gVGV4dCBub2RlIHdpdGggY29udGVudCB0byB0cmFuc2xhdGUuXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfYWRkVGV4dE5vZGVUb0ZhZGUoJHRleHROb2RlOiREb21Ob2RlKTpMYW5nIHtcbiAgICAgICAgY29uc3QgJHBhcmVudDokRG9tTm9kZSA9ICR0ZXh0Tm9kZS5wYXJlbnQoKVxuICAgICAgICBpZiAodGhpcy5fJGRvbU5vZGVUb0ZhZGUpXG4gICAgICAgICAgICB0aGlzLl8kZG9tTm9kZVRvRmFkZSA9IHRoaXMuXyRkb21Ob2RlVG9GYWRlLmFkZCgkcGFyZW50KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl8kZG9tTm9kZVRvRmFkZSA9ICRwYXJlbnRcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgdGV4dCBub2RlIHRvIGNoYW5nZSBpdHMgY29udGVudCB3aXRoIGdpdmVuIHJlcGxhY2VtZW50LlxuICAgICAqIEBwYXJhbSAkY3VycmVudFRleHROb2RlVG9UcmFuc2xhdGUgLSBUZXh0IG5vZGUgd2l0aCBjb250ZW50IHRvXG4gICAgICogdHJhbnNsYXRlLlxuICAgICAqIEBwYXJhbSAkY3VycmVudERvbU5vZGUgLSBBIGNvbW1lbnQgbm9kZSB3aXRoIHJlcGxhY2VtZW50IGNvbnRlbnQuXG4gICAgICogQHBhcmFtIG1hdGNoIC0gQSBtYXRjaGluZyBhcnJheSBvZiByZXBsYWNlbWVudCdzIHRleHQgY29udGVudC5cbiAgICAgKiBAcGFyYW0gJGN1cnJlbnRMYW5ndWFnZURvbU5vZGUgLSBBIHBvdGVudGlhbCBnaXZlbiB0ZXh0IG5vZGUgaW5kaWNhdGluZ1xuICAgICAqIHRoZSBsYW5ndWFnZSBvZiBnaXZlbiB0ZXh0IG5vZGUuXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJUZXh0Tm9kZVRvQ2hhbmdlKFxuICAgICAgICAkY3VycmVudFRleHROb2RlVG9UcmFuc2xhdGU6JERvbU5vZGUsICRjdXJyZW50RG9tTm9kZTo/JERvbU5vZGUsXG4gICAgICAgIG1hdGNoOkFycmF5PHN0cmluZz4sICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlOj8kRG9tTm9kZVxuICAgICk6TGFuZyB7XG4gICAgICAgIHRoaXMuX2FkZFRleHROb2RlVG9GYWRlKCRjdXJyZW50VGV4dE5vZGVUb1RyYW5zbGF0ZSlcbiAgICAgICAgaWYgKCRjdXJyZW50RG9tTm9kZSlcbiAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAkdGV4dE5vZGVUb1RyYW5zbGF0ZTogJGN1cnJlbnRUZXh0Tm9kZVRvVHJhbnNsYXRlLFxuICAgICAgICAgICAgICAgICRub2RlVG9SZXBsYWNlOiAkY3VycmVudERvbU5vZGUsXG4gICAgICAgICAgICAgICAgdGV4dFRvUmVwbGFjZTogbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgJGN1cnJlbnRMYW5ndWFnZURvbU5vZGU6ICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGxhc3QgdGV4dCBoYXMgYSBsYW5ndWFnZSBpbmRpY2F0aW9uIGNvbW1lbnQgbm9kZS4gVGhpc1xuICAgICAqIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciBlYWNoIHBhcnNlZCBkb20gdGV4dCBub2RlLlxuICAgICAqIEBwYXJhbSAkbGFzdFRleHROb2RlVG9UcmFuc2xhdGUgLSBMYXN0IHRleHQgdG8gbm9kZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0gJGxhc3RMYW5ndWFnZURvbU5vZGUgLSBBIHBvdGVudGlhbCBnaXZlbiBsYW5ndWFnZSBpbmRpY2F0aW9uXG4gICAgICogY29tbWVuZCBub2RlLlxuICAgICAqIEBwYXJhbSBlbnN1cmUgLSBJbmRpY2F0ZXMgaWYgY3VycmVudCBsYW5ndWFnZSBzaG91bGQgYmUgZW5zdXJlZCBhZ2FpblxuICAgICAqIGV2ZXJ5IHRleHQgbm9kZSBjb250ZW50LlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgdGhlIHJldHJpZXZlZCBvciBuZXdseSBjcmVhdGVkIGxhbmd1YWdlIGluZGljYXRpbmdcbiAgICAgKiBjb21tZW50IG5vZGUuXG4gICAgICovXG4gICAgX2Vuc3VyZUxhc3RUZXh0Tm9kZUhhdmluZ0xhbmd1YWdlSW5kaWNhdG9yKFxuICAgICAgICAkbGFzdFRleHROb2RlVG9UcmFuc2xhdGU6PyREb21Ob2RlLCAkbGFzdExhbmd1YWdlRG9tTm9kZTo/JERvbU5vZGUsXG4gICAgICAgIGVuc3VyZTpib29sZWFuXG4gICAgKTo/JERvbU5vZGUge1xuICAgICAgICBpZiAoJGxhc3RUZXh0Tm9kZVRvVHJhbnNsYXRlICYmICEkbGFzdExhbmd1YWdlRG9tTm9kZSkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBMYXN0IHRleHQgbm9kZSBkb2Vzbid0IGhhdmUgYSBjdXJyZW50IGxhbmd1YWdlIGluZGljYXRpbmcgZG9tXG4gICAgICAgICAgICAgICAgbm9kZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgY3VycmVudExvY2FsTGFuZ3VhZ2U6c3RyaW5nID0gdGhpcy5jdXJyZW50TGFuZ3VhZ2VcbiAgICAgICAgICAgIGlmIChlbnN1cmUpXG4gICAgICAgICAgICAgICAgY3VycmVudExvY2FsTGFuZ3VhZ2UgPSB0aGlzLl9vcHRpb25zLmRlZmF1bHRcbiAgICAgICAgICAgICRsYXN0TGFuZ3VhZ2VEb21Ob2RlID0gJChgPCEtLSR7Y3VycmVudExvY2FsTGFuZ3VhZ2V9LS0+YClcbiAgICAgICAgICAgICRsYXN0VGV4dE5vZGVUb1RyYW5zbGF0ZS5hZnRlcigkbGFzdExhbmd1YWdlRG9tTm9kZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGxhc3RMYW5ndWFnZURvbU5vZGVcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGxvdyBsZXZlbCB0ZXh0IHJlcGxhY2VtZW50cyBmb3Igc3dpdGNoaW5nIHRvIGdpdmVuXG4gICAgICogbGFuZ3VhZ2UuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIC0gVGhlIG5ldyBsYW5ndWFnZSB0byBzd2l0Y2ggdG8uXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfc3dpdGNoTGFuZ3VhZ2UobGFuZ3VhZ2U6c3RyaW5nKTpMYW5nIHtcbiAgICAgICAgZm9yIChjb25zdCByZXBsYWNlbWVudDpSZXBsYWNlbWVudCBvZiB0aGlzLl9yZXBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50VGV4dDpzdHJpbmcgPSByZXBsYWNlbWVudC4kdGV4dE5vZGVUb1RyYW5zbGF0ZS5odG1sKClcbiAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudC4kdGV4dE5vZGVUb1RyYW5zbGF0ZS5wcm9wKCdub2RlTmFtZScpID09PSAnI3RleHQnKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0ID0gcmVwbGFjZW1lbnQuJHRleHROb2RlVG9UcmFuc2xhdGUucHJvcChcbiAgICAgICAgICAgICAgICAgICAgJ3RleHRDb250ZW50JylcbiAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRUZXh0OnN0cmluZyA9IGN1cnJlbnRUZXh0LnRyaW0oKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICF0aGlzLl9vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVyIHx8XG4gICAgICAgICAgICAgICAgIXRyaW1tZWRUZXh0LmVuZHNXaXRoKHRoaXMuX29wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXIucG9zdCkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVyLnBvc3RcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZVR5cGVDaGVja1xuICAgICAgICAgICAgICAgIGxldCAkY3VycmVudExhbmd1YWdlRG9tTm9kZTokRG9tTm9kZSA9XG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LiRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlXG4gICAgICAgICAgICAgICAgaWYgKCFyZXBsYWNlbWVudC4kY3VycmVudExhbmd1YWdlRG9tTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgTGFuZ3VhZ2Ugbm90ZSB3YXNuJ3QgcHJlc2VudCBpbml0aWFsbHkuIFNvIHdlIGhhdmUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBpdCBub3cuXG4gICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlID0gJCgnYm9keScpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50RG9tTm9kZUZvdW5kOmJvb2xlYW4gPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC4kdGV4dE5vZGVUb1RyYW5zbGF0ZS5wYXJlbnQoKS5jb250ZW50cyhcbiAgICAgICAgICAgICAgICAgICAgKS5lYWNoKGZ1bmN0aW9uKCk6P2ZhbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RG9tTm9kZUZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuJGN1cnJlbnRMYW5ndWFnZURvbU5vZGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudExhbmd1YWdlRG9tTm9kZT0gJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IHJlcGxhY2VtZW50LiR0ZXh0Tm9kZVRvVHJhbnNsYXRlWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREb21Ob2RlRm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZTpzdHJpbmcgPSAkY3VycmVudExhbmd1YWdlRG9tTm9kZS5wcm9wKFxuICAgICAgICAgICAgICAgICAgICAndGV4dENvbnRlbnQnKVxuICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gY3VycmVudExhbmd1YWdlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICBgVGV4dCBub2RlIFwiJHtyZXBsYWNlbWVudC50ZXh0VG9SZXBsYWNlfVwiIGlzIG1hcmtlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhcyBcIiR7Y3VycmVudExhbmd1YWdlfVwiIGFuZCBoYXMgc2FtZSB0cmFuc2xhdGlvbiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSBhcyBpdCBhbHJlYWR5IGlzLicpXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZU5hbWU6c3RyaW5nID0gcmVwbGFjZW1lbnQuJG5vZGVUb1JlcGxhY2UucHJvcChcbiAgICAgICAgICAgICAgICAgICAgJ25vZGVOYW1lJ1xuICAgICAgICAgICAgICAgICkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJyNjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuJHRleHROb2RlVG9UcmFuc2xhdGUuYWZ0ZXIoJChcbiAgICAgICAgICAgICAgICAgICAgICAgIGA8IS0tJHtjdXJyZW50TGFuZ3VhZ2V9OiR7Y3VycmVudFRleHR9LS0+YCkpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC4kdGV4dE5vZGVUb1RyYW5zbGF0ZS5hZnRlcigkKFxuICAgICAgICAgICAgICAgICAgICAgICAgYDwke25vZGVOYW1lfT4ke2N1cnJlbnRMYW5ndWFnZX06JHtjdXJyZW50VGV4dH08L2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCR7bm9kZU5hbWV9PmBcbiAgICAgICAgICAgICAgICAgICAgKS5oaWRlKCkpXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuJHRleHROb2RlVG9UcmFuc2xhdGUuYWZ0ZXIoJChgPCEtLSR7bGFuZ3VhZ2V9LS0+YCkpXG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50LiR0ZXh0Tm9kZVRvVHJhbnNsYXRlLnByb3AoXG4gICAgICAgICAgICAgICAgICAgICdub2RlTmFtZSdcbiAgICAgICAgICAgICAgICApID09PSAnI3RleHQnKVxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC4kdGV4dE5vZGVUb1RyYW5zbGF0ZS5wcm9wKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHRDb250ZW50JywgcmVwbGFjZW1lbnQudGV4dFRvUmVwbGFjZSlcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LiR0ZXh0Tm9kZVRvVHJhbnNsYXRlLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC50ZXh0VG9SZXBsYWNlKVxuICAgICAgICAgICAgICAgICRjdXJyZW50TGFuZ3VhZ2VEb21Ob2RlLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuJG5vZGVUb1JlcGxhY2UucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFuc2xhdGUgcmVnaXN0ZXJlZCBrbm93biB0ZXh0IG5vZGVzLlxuICAgICAgICAkLmVhY2godGhpcy5fdGV4dE5vZGVzV2l0aEtub3duVHJhbnNsYXRpb24sIChcbiAgICAgICAgICAgIGNvbnRlbnQ6c3RyaW5nLCAkZG9tTm9kZTokRG9tTm9kZVxuICAgICAgICApOiREb21Ob2RlID0+ICRkb21Ob2RlLnByb3AoJ3RleHRDb250ZW50JywgY29udGVudCkpXG4gICAgICAgIGlmICgnbG9jYWxTdG9yYWdlJyBpbiBjb250ZXh0KVxuICAgICAgICAgICAgY29udGV4dC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLnNlc3Npb25EZXNjcmlwdGlvbiwgbGFuZ3VhZ2UpXG4gICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gbGFuZ3VhZ2VcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgaW5kaWNhdG9yIGluIGxhbmd1YWdlIHN3aXRjaCB0cmlnZ2VyZWQgZG9tXG4gICAgICogbm9kZXMuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIC0gVGhlIG5ldyBsYW5ndWFnZSB0byBzd2l0Y2ggdG8uXG4gICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfc3dpdGNoQ3VycmVudExhbmd1YWdlSW5kaWNhdG9yKGxhbmd1YWdlOnN0cmluZyk6TGFuZyB7XG4gICAgICAgICQoXG4gICAgICAgICAgICBgYVtocmVmPVwiIyR7dGhpcy5fb3B0aW9ucy5sYW5ndWFnZUhhc2hQcmVmaXh9YCArXG4gICAgICAgICAgICBgJHt0aGlzLmN1cnJlbnRMYW5ndWFnZX1cIl0uYCArXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmN1cnJlbnRMYW5ndWFnZUluZGljYXRvckNsYXNzTmFtZVxuICAgICAgICApLnJlbW92ZUNsYXNzKHRoaXMuX29wdGlvbnMuY3VycmVudExhbmd1YWdlSW5kaWNhdG9yQ2xhc3NOYW1lKVxuICAgICAgICAkKFxuICAgICAgICAgICAgYGFbaHJlZj1cIiMke3RoaXMuX29wdGlvbnMubGFuZ3VhZ2VIYXNoUHJlZml4fSR7bGFuZ3VhZ2V9XCJdYFxuICAgICAgICApLmFkZENsYXNzKHRoaXMuX29wdGlvbnMuY3VycmVudExhbmd1YWdlSW5kaWNhdG9yQ2xhc3NOYW1lKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cbn1cbi8vIGVuZHJlZ2lvblxuJC5MYW5nID0gZnVuY3Rpb24oKTphbnkge1xuICAgIHJldHVybiAkLlRvb2xzKCkuY29udHJvbGxlcihMYW5nLCBhcmd1bWVudHMpXG59XG4kLkxhbmcuY2xhc3MgPSBMYW5nXG4vKiogVGhlIGpRdWVyeS1sYW5nIHBsdWdpbiBjbGFzcy4gKi9cbm1vZHVsZS5leHBvcnRzID0gTGFuZ1xuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBpbmRleC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0ZBOzs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQTs7O0FBK0RBOzs7Ozs7Ozs7OztBQXNCQTs7O0FBa0RBOzs7Ozs7QUFVQTtBQVNBOzs7Ozs7QUE4QkE7QUFtQkE7QUFvQkE7OztBQTZCQTtBQU9BOzs7O0FBa0NBOzs7O0FBb0JBOzs7Ozs7O0FBMkNBOzs7O0FBaUNBOzs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7QUF3QkE7OztBQVNBOzs7OztBQWNBO0FBYUE7OztBQU9BO0FBNkNBOzs7OztBQWVBO0FBbGpCQTtBQUFBOzs7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/*!*****************!*\
  !*** ./test.js ***!
  \*****************/
/***/ function(module, exports, __webpack_require__) {

	eval("// #!/usr/bin/env node\n// -*- coding: utf-8 -*-\n'use strict'; /* !\n    region header\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons\n    naming 3.0 unported license.\n    See http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/ // region imports\nvar _browserAPI=__webpack_require__(/*! webOptimizer/browserAPI */ 4);var _browserAPI2=_interopRequireDefault(_browserAPI);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};} // endregion\n// endregion\n// region declaration\n// endregion\n// region types\nvar QUnit= true?__webpack_require__(/*! qunit-cli */ 10):require('qunitjs');(0,_browserAPI2.default)(function(browserAPI,alreadyLoaded){var $=__webpack_require__(/*! jquery */ 1);$.context=browserAPI.window.document;__webpack_require__(/*! ./index */ 2); // region configuration\nQUnit.config=$.extend(QUnit.config||{},{ /*\n        notrycatch: true,\n        noglobals: true,\n        */altertitle:true,autostart:true,fixture:'',hidepassed:false,maxDepth:3,reorder:false,requireExpects:false,testTimeout:30*1000,scrolltop:false});var $bodyDomNode=$('body');if('localStorage' in browserAPI.window)browserAPI.window.localStorage.removeItem('Lang');var langDeferred=$.Lang({allowedLanguages:['enUS','deDE','frFR'],domNodeSelectorPrefix:'body #qunit-fixture',initial:'enUS'}); // endregion\nlangDeferred.always(function(lang){ // region tests\n// / region public methods\n// // region special\nQUnit.test('initialize',function(assert){return lang.initialize().then(function(subLang){return assert.strictEqual(subLang,lang);}).then(assert.async());}); // // endregion\nQUnit.test('switch',function(assert){return lang.switch('en').then(function(subLang){return assert.strictEqual(subLang,lang);}).then(function(){$('#qunit-fixture').html('<div>english<!--deDE:german--></div>');return lang.switch('deDE').always(function(){return assert.ok($.Tools.class.isEquivalentDom($('#qunit-fixture').html().replace(/(?: |\\n)+/g,' '),'<div style=\"opacity: 1\">'+'german<!--deDE--><!--enUS:english-->'+'</div>'));});}).then(function(){return lang.switch('deDE').always(function(){return assert.ok($.Tools.class.isEquivalentDom($('#qunit-fixture').html().replace(/(?: |\\n)+/g,' '),'<div style=\"opacity: 1\">'+'german<!--deDE--><!--enUS:english-->'+'</div>'));});}).then(function(){return lang.switch('en').always(function(){return assert.ok($.Tools.class.isEquivalentDom($('#qunit-fixture').html().replace(/(?: |\\n)+/g,' '),'<div style=\"opacity: 1\">'+'english<!--enUS--><!--deDE:german-->'+'</div>'));});}).then(function(){$('#qunit-fixture').html('\\n                <div class=\"toc\">\\n                    <ul><li><a href=\"#\">english</a></li></ul>\\n                </div>\\n                <div>english<!--deDE:german--></div>\\n            ');return lang.initialize().then(function(subLang){return subLang.switch('de').always(function(){return assert.ok($.Tools.class.isEquivalentDom($('#qunit-fixture').html().replace(/(?: |\\n)+/g,' '),' <div class=\"toc\"> '+'<ul>'+'<li style=\"opacity: 1\">'+'<a href=\"#\">'+'german'+'</a>'+'</li>'+'</ul>'+' </div>'+' <div style=\"opacity: 1\">'+'german<!--deDE--><!--enUS:english-->'+'</div> '));});});}).then(assert.async());});QUnit.test('refresh',function(assert){return lang.refresh().then(function(subLang){return assert.strictEqual(subLang,lang);}).then(assert.async());}); // / endregion\n// / region protected methods\nQUnit.test('_normalizeLanguage',function(assert){var _arr=[['de','deDE'],['de-de','deDE'],['en-us','enUS'],['fr','frFR'],['','enUS']];for(var _i=0;_i<_arr.length;_i++){var test=_arr[_i];assert.strictEqual(lang._normalizeLanguage(test[0]),test[1]);}});QUnit.test('_determineUsefulLanguage',function(assert){if(typeof browserAPI.window.localStorage!=='undefined'){browserAPI.window.localStorage[lang._options.sessionDescription]='enUS';assert.strictEqual(lang._determineUsefulLanguage(),'enUS');delete browserAPI.window.localStorage[lang._options.sessionDescription];}var referenceLanguage=lang._options.default;if(typeof navigator.language!=='undefined')referenceLanguage=navigator.language;assert.strictEqual(lang._normalizeLanguage(lang._determineUsefulLanguage()),lang._normalizeLanguage(referenceLanguage));});QUnit.test('_handleSwitchEffect',function(assert){return lang._handleSwitchEffect('deDE',false).then(function(subLang){return assert.strictEqual(subLang,lang);}).then(assert.async());});QUnit.test('_addTextNodeToFade',function(assert){return assert.strictEqual(lang._addTextNodeToFade($bodyDomNode),lang);});QUnit.test('_registerTextNodeToChange',function(assert){lang._registerTextNodeToChange($bodyDomNode,$bodyDomNode.children(),['1','2','3'],$bodyDomNode.children());assert.strictEqual(lang._replacements.length,1);lang._replacements=[];});QUnit.test('_ensureLastTextNodeHavingLanguageIndicator',function(assert){return assert.strictEqual(lang._ensureLastTextNodeHavingLanguageIndicator(null,null,false),null);});QUnit.test('_switchLanguage',function(assert){return $.Lang().then(function(lang){assert.strictEqual(lang._switchLanguage('deDE'),lang);assert.strictEqual(lang.currentLanguage,'deDE');}).then(assert.async());});QUnit.test('_switchCurrentLanguageIndicator',function(assert){return assert.strictEqual(lang._switchCurrentLanguageIndicator('deDE'),lang);}); // / endregion\n// endregion\n});if(true)QUnit.load(); // region hot module replacement\n/*\n        NOTE: hot module replacement doesn't work yet since qunit is not\n        resetable yet:\n\n        if (typeof module === 'object' && 'hot' in module && module.hot) {\n            module.hot.accept()\n            // IgnoreTypeCheck\n            module.hot.dispose(():void => {\n                QUnit.reset()\n                console.clear()\n            }\n        }\n    */ // endregion\n}); // region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/*!***********************************************!*\
  !*** ./~/webOptimizer/browserAPI.compiled.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(__dirname) {// #!/usr/bin/env node\n\n// -*- coding: utf-8 -*-\n'use strict';\n/* !\n    region header\n    Copyright Torben Sickert (info[\"~at~\"]torben.website) 16.12.2012\n\n    License\n    -------\n\n    This library written by Torben Sickert stand under a creative commons naming\n    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de\n    endregion\n*/\n// region imports\n/* eslint-disable no-unused-vars */\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n// endregion\n// region variables\n\n/* eslint-enable no-unused-vars */\n// endregion\n// region declaration\nconst onCreatedListener = [];\nlet browserAPI;\n// endregion\n// region ensure presence of common browser environment\nif (true) {\n    // region mock browser environment\n    const fileSystem = __webpack_require__(/*! fs */ 6);\n    const path = __webpack_require__(/*! path */ 9);\n    const metaDOM = __webpack_require__(/*! jsdom */ 8);\n    const virtualConsole = metaDOM.createVirtualConsole().sendTo(console, { omitJsdomErrors: true });\n    virtualConsole.on('jsdomError', error => {\n        if (!browserAPI.debug && ['XMLHttpRequest', 'resource loading'\n        // IgnoreTypeCheck\n        ].includes(error.type)) console.warn(`Loading resource failed: ${ error.toString() }.`);else console.error(error);\n    });\n    let templateFilePath = path.join(__dirname, 'test.compiled.html');\n    try {\n        fileSystem.accessSync(templateFilePath, fileSystem.F_OK);\n    } catch (error) {\n        templateFilePath = path.join(process.cwd(), __dirname, 'node_modules/webOptimizer/test.compiled.html');\n    }\n    metaDOM.env({\n        created: (error, window) => {\n            browserAPI = {\n                debug: false, domContentLoaded: false, metaDOM, window };\n            browserAPI.window.document.addEventListener('DOMContentLoaded', () => {\n                browserAPI.domContentLoaded = true;\n            });\n            if (error) throw error;else for (const callback of onCreatedListener) callback(browserAPI, false);\n        },\n        features: {\n            FetchExternalResources: ['script', 'frame', 'iframe', 'link', 'img'],\n            ProcessExternalResources: ['script'],\n            SkipExternalResources: false\n        },\n        html: fileSystem.readFileSync(templateFilePath, { encoding: 'utf-8' }),\n        resourceLoader: (resource, callback) => {\n            if (resource.url.hostname === 'localhost') {\n                resource.url.host = resource.url.hostname = '';\n                resource.url.port = null;\n                resource.url.protocol = 'file:';\n                resource.url.href = resource.url.href.replace(/^[a-zA-Z]+:\\/\\/localhost(?::[0-9]+)?/, `file://${ process.cwd() }`);\n                resource.url.path = resource.url.pathname = path.join(process.cwd(), resource.url.path);\n            }\n            if (browserAPI.debug) console.info(`Load resource \"${ resource.url.href }\".`);\n            return resource.defaultFetch(function (error) {\n                if (!error) callback.apply(this, arguments);\n            });\n        },\n        url: 'http://localhost',\n        virtualConsole\n    });\n    // endregion\n} else {\n        browserAPI = { debug: false, domContentLoaded: false, metaDOM: null, window };\n        window.document.addEventListener('DOMContentLoaded', () => {\n            browserAPI.domContentLoaded = true;\n            for (const callback of onCreatedListener) callback(browserAPI, false);\n        });\n    }\n// endregion\n\nexports.default = (callback, clear = true) => {\n    // region initialize global context\n    /*\n        NOTE: We have to define window globally before anything is loaded to\n        ensure that all future instances share the same window object.\n    */\n    if (clear && typeof global !== 'undefined' && global !== browserAPI.window) {\n        global.window = browserAPI.window;\n        for (const key in browserAPI.window) if (browserAPI.window.hasOwnProperty(key) && !global.hasOwnProperty(key)) global[key] = browserAPI.window[key];\n    }\n    // endregion\n    if (true) return browserAPI ? callback(browserAPI, true) : onCreatedListener.push(callback);\n    return browserAPI.domContentLoaded ? callback(browserAPI, true) : onCreatedListener.push(callback);\n};\n// region vim modline\n// vim: set tabstop=4 shiftwidth=4 expandtab:\n// vim: foldmethod=marker foldmarker=region,endregion:\n// endregion\n\n//# sourceMappingURL=data:application/json;base64,\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 6 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ function(module, exports) {

	eval("module.exports = require(\"fs\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImZzXCI/MmUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwiZnNcIlxuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 7 */
/*!*******************************!*\
  !*** external "jQuery-tools" ***!
  \*******************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jQuery-tools\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeS10b29sc1wiPzRiYTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwialF1ZXJ5LXRvb2xzXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJqUXVlcnktdG9vbHNcIlxuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 8 */
/*!************************!*\
  !*** external "jsdom" ***!
  \************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"jsdom\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImpzZG9tXCI/NDg3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJqc2RvbVwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwianNkb21cIlxuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ function(module, exports) {

	eval("module.exports = require(\"path\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInBhdGhcIj81YjJhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcInBhdGhcIlxuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 10 */
/*!****************************!*\
  !*** external "qunit-cli" ***!
  \****************************/
/***/ function(module, exports) {

	eval("module.exports = require(\"qunit-cli\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJxdW5pdC1jbGlcIj82MTU0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInF1bml0LWNsaVwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwicXVuaXQtY2xpXCJcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);